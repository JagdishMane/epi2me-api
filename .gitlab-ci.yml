image: ubuntu:18.04
stages:
  - versiontrack
  - test
  - triggers
  - publish

  versiontrack:
    stage: versiontrack
    script:
      - echo "export PATCH=$CI_BUILD_ID" > PATCH_VERSION
    artifacts:
      paths:
        - ./PATCH_VERSION

.common: &common |
    sed -i 's|deb http://deb-repo.oxfordnanolabs.local/apt|#deb http://deb-repo.oxfordnanolabs.local/apt|g' /etc/apt/sources.list /etc/apt/sources.list.d/*.list || true
    apt-get clean
    apt-get update
    apt-get install -y curl git wget lsb-release gnupg build-essential openssl
    wget -O- http://deb-repo.oxfordnanolabs.local/apt/roger.pettett@nanoporetech.com.key | apt-key add -
    echo "deb http://deb-repo.oxfordnanolabs.local/apt $(lsb_release -cs) non-free" > /etc/apt/sources.list.d/deb-repo.list
    curl -sL https://deb.nodesource.com/setup_12.x > nodejs-repo
    chmod +x nodejs-repo
    ./nodejs-repo
    rm nodejs-repo
    make deps

test:
  stage: test
  script:
    - *common
    - make cover
  variables:
    PATCH: $CI_BUILD_ID

.npm-publish-external: &npm_publish_external
  stage: publish
  script:
    - *common
    - npm i
    - source ./PATCH_VERSION
    - echo "Patching report versions to $PATCH"
    - npm run package:version
    - npm run build:docs
    - echo $NPM_TOKEN
    - echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" >> ./.npmrc
    - npm publish --verbose --access public --tag ${TAG}

publish_experimental:
  <<: *npm_publish_external
  except:
    - dev
    - master
    - tags
  variables:
    TAG: 'experimental'

publish_dev:
  <<: *npm_publish_external
  only:
    - dev
  variables:
    TAG: 'develop'

publish_master:
  <<: *npm_publish_external
  only:
    - master
  variables:
    TAG: 'next'

publish_release:
  <<: *npm_publish_external
  only:
    - /^release-\d+\.\d+(?:.\d+)?(?:-\S+)?$/ # use regexp
    - tags
  variables:
    TAG: 'latest'

pages:
  stage: triggers
  allow_failure: true
  script:
    - *common
    - mkdir -p public
    - (make cover | tee coverage.txt) && mv coverage/* public/
    - (echo -n "Coverage "; grep "All files" coverage.txt | awk '{print $6}')
    - rm coverage.txt
  coverage: '/Coverage \d+\.\d+/'
  artifacts:
    paths:
      - public
#    expire_in: 30 days
  only:
    - dev
