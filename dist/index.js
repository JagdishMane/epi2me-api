/**
 * Copyright Metrichor Ltd. (An Oxford Nanopore Technologies Company) 2019
 */

"use strict";function _interopDefault(e){return e&&"object"===typeof e&&"default"in e?e.default:e}var lodash=require("lodash"),AWS=_interopDefault(require("aws-sdk")),fs=require("fs-extra"),fs__default=_interopDefault(fs),os=require("os"),os__default=_interopDefault(os),path=_interopDefault(require("path")),proxy=_interopDefault(require("proxy-agent")),Promise$1=_interopDefault(require("core-js/features/promise")),axios=_interopDefault(require("axios")),crypto=_interopDefault(require("crypto")),tunnel=require("tunnel"),sqlite=_interopDefault(require("sqlite")),version="3.0.0";axios.defaults.validateStatus=(e=>e<=504);const UNITS=["","K","M","G","T","P","E","Z"],DIV=1e3,utils=function(){const e=(e,t)=>{e.headers||(e.headers={});let s=t;if(s||(s={}),!s.apikey)return;if(e.headers["X-EPI2ME-ApiKey"]=s.apikey,!s.apisecret)return;e.headers["X-EPI2ME-SignatureDate"]=(new Date).toISOString(),e.url.match(/^https:/)&&(e.url=e.url.replace(/:443/,"")),e.url.match(/^http:/)&&(e.url=e.url.replace(/:80/,""));const o=[e.url,Object.keys(e.headers).sort().filter(e=>e.match(/^x-epi2me/i)).map(t=>`${t}:${e.headers[t]}`).join("\n")].join("\n"),i=crypto.createHmac("sha1",s.apisecret).update(o).digest("hex");e.headers["X-EPI2ME-SignatureV0"]=i},t=async e=>{const t=e?e.data:null;if(!t)return Promise.reject(new Error("unexpected non-json response"));if(e&&e.status>=400){let s=`Network error ${e.status}`;return t.error&&(s=t.error),504===e.status&&(s="Please check your network connection and try again."),Promise.reject(new Error(s))}return t.error?Promise.reject(new Error(t.error)):Promise.resolve(t)};return{version:version,headers:(t,s)=>{const{log:o}=lodash.merge({log:{debug:()=>{}}},s);let i=s;if(i||(i={}),t.headers=lodash.merge({Accept:"application/json","Content-Type":"application/json","X-EPI2ME-Client":i.user_agent||"api","X-EPI2ME-Version":i.agent_version||utils.version},t.headers),"signing"in i&&!i.signing||e(t,i),i.proxy){const e=i.proxy.match(/https?:\/\/((\S+):(\S+)@)?(\S+):(\d+)/),s=e[2],r=e[3],n={host:e[4],port:e[5]};s&&r&&(n.proxyAuth=`${s}:${r}`),i.proxy.match(/^https/)?(o.debug("using HTTPS over HTTPS proxy",JSON.stringify(n)),t.httpsAgent=tunnel.httpsOverHttps({proxy:n})):(o.debug("using HTTPS over HTTP proxy",JSON.stringify(n)),t.httpsAgent=tunnel.httpsOverHttp({proxy:n})),t.proxy=!1}},get:async(e,s)=>{const{log:o}=lodash.merge({log:{debug:()=>{}}},s);let i,r=s.url,n=e;s.skip_url_mangle?i=n:(n=`/${n}`,i=(r=r.replace(/\/+$/,""))+(n=n.replace(/\/+/g,"/")));const a={url:i,gzip:!0};let l;utils.headers(a,s);try{o.debug(`GET ${a.url}`),l=await axios.get(a.url,a)}catch(c){return Promise.reject(c)}return t(l,s)},post:async(e,s,o)=>{const{log:i}=lodash.merge({log:{debug:()=>{}}},o);let r=o.url;const n={url:`${r=r.replace(/\/+$/,"")}/${e.replace(/\/+/g,"/")}`,gzip:!0,data:s,headers:{}};if(o.legacy_form){const e=[],t=lodash.merge({json:JSON.stringify(s)},s);Object.keys(t).sort().forEach(s=>{e.push(`${s}=${escape(t[s])}`)}),n.data=e.join("&"),n.headers["Content-Type"]="application/x-www-form-urlencoded"}utils.headers(n,o);const{data:a}=n;let l;delete n.data;try{i.debug(`POST ${n.url}`),l=await axios.post(n.url,a,n)}catch(c){return Promise.reject(c)}return t(l,o)},put:async(e,s,o,i)=>{const{log:r}=lodash.merge({log:{debug:()=>{}}},i);let n=i.url;const a={url:`${n=n.replace(/\/+$/,"")}/${e.replace(/\/+/g,"/")}/${s}`,gzip:!0,data:o,headers:{}};if(i.legacy_form){const e=[],t=lodash.merge({json:JSON.stringify(o)},o);Object.keys(t).sort().forEach(s=>{e.push(`${s}=${escape(t[s])}`)}),a.data=e.join("&"),a.headers["Content-Type"]="application/x-www-form-urlencoded"}utils.headers(a,i);const{data:l}=a;let c;delete a.data;try{r.debug(`PUT ${a.url}`),c=await axios.put(a.url,l,a)}catch(u){return Promise.reject(u)}return t(c,i)},niceSize(e,t){let s=t||0,o=e||0;return o>1e3?(o/=1e3,(s+=1)>=UNITS.length?"???":this.niceSize(o,s)):0===s?`${o}${UNITS[s]}`:`${o.toFixed(1)}${UNITS[s]}`}}}();async function bytes(e){return fs__default.stat(e).then(e=>({type:"bytes",bytes:e.size}))}function fastq(e){return new Promise(async(t,s)=>{let o,i=1,r={size:0};try{r=await fs__default.stat(e)}catch(n){s(n)}fs__default.createReadStream(e).on("data",e=>{o=-1,i-=1;do{o=e.indexOf(10,o+1),i+=1}while(-1!==o)}).on("end",()=>t({type:"fastq",bytes:r.size,reads:Math.floor(i/4)})).on("error",s)})}function fasta(e){return new Promise(async(t,s)=>{let o,i=1,r={size:0};try{r=await fs__default.stat(e)}catch(n){s(n)}fs__default.createReadStream(e).on("data",e=>{o=-1,i-=1;do{o=e.indexOf(62,o+1),i+=1}while(-1!==o)}).on("end",()=>t({type:"fasta",bytes:r.size,sequences:Math.floor(i/2)})).on("error",s)})}const mapping={fastq:fastq,fasta:fasta,default:bytes};function filestats(e){if("string"!==typeof e&&!(e instanceof String))return Promise.resolve({});let t=path.extname(e).toLowerCase().replace(/^[.]/,"");return"fq"===t?t="fastq":"fa"===t&&(t="fasta"),mapping[t]||(t="default"),mapping[t](e)}utils.pipe=(async(e,t,s,o)=>{let i=s.url,r=`/${e}`;const n={uri:(i=i.replace(/\/+$/,""))+(r=r.replace(/\/+/g,"/")),gzip:!0,headers:{"Accept-Encoding":"gzip",Accept:"application/gzip"}};return utils.headers(n,s),s.proxy&&(n.proxy=s.proxy),o&&(n.onUploadProgress=o),n.responseType="stream",new Promise(async(e,s)=>{try{const i=fs__default.createWriteStream(t);(await axios.get(n.uri,n)).data.pipe(i),i.on("finish",e(t)),i.on("error",s(new Error("writer failed")))}catch(o){s(o)}})}),utils.countFileReads=(e=>filestats(e).then(e=>e.reads));let IdCounter=0;utils.getFileID=(()=>`FILE_${IdCounter+=1}`),utils.lsFolder=((e,t,s,o="")=>fs__default.readdir(e).then(i=>{let r=i;t&&(r=r.filter(t));let n=[];const a=[],l=r.map(t=>fs__default.stat(path.join(e,t)).then(i=>{if(i.isDirectory())return n.push(path.join(e,t)),Promise.resolve();if(i.isFile()&&(!s||path.extname(t)===s)){const s={name:path.parse(t).base,path:path.join(e,t),size:i.size,id:utils.getFileID()},r=e.replace(o,"").replace("\\","").replace("/","");return lodash.isString(r)&&r.length&&(s.batch=r),a.push(s),Promise.resolve()}return Promise.resolve()}));return Promise.all(l).then(()=>(n=n.sort(),Promise.resolve({files:a,folders:n}))).catch(e=>Promise.reject(new Error(`error listing folder ${e}`)))})),utils.loadInputFiles=(({inputFolder:e,outputFolder:t,uploadedFolder:s,filetype:o},i,r)=>new Promise((i,n)=>{const a=e=>{const o=path.basename(e);return!(e.split(path.sep).filter(e=>e.match(/^[.]/)).length||"downloads"===o||"uploaded"===o||"skip"===o||"fail"===o||s&&o===path.basename(s)||t&&o===path.basename(t)||"tmp"===o||r&&r(e))};let l=[e];const c=()=>{l&&l.length&&utils.lsFolder(l.splice(0,1)[0],a,o,e).then(({files:e,folders:t})=>{e&&e.length?i(e):(l=[...t,...l]).length?c():i()}).catch(e=>{n(new Error(`Failed to check for new files: ${e.message}`))})};c()}));var local=!1,url="https://epi2me.nanoporetech.com",user_agent="EPI2ME API",region="eu-west-1",sessionGrace=5,uploadTimeout=1200,downloadTimeout=1200,fileCheckInterval=5,downloadCheckInterval=3,stateCheckInterval=60,inFlightDelay=600,waitTimeSeconds=20,waitTokenError=30,transferPoolSize=3,downloadMode="data+telemetry",filetype=".fastq",signing=!0,DEFAULTS={local:local,url:url,user_agent:user_agent,region:region,sessionGrace:sessionGrace,uploadTimeout:uploadTimeout,downloadTimeout:downloadTimeout,fileCheckInterval:fileCheckInterval,downloadCheckInterval:downloadCheckInterval,stateCheckInterval:stateCheckInterval,inFlightDelay:inFlightDelay,waitTimeSeconds:waitTimeSeconds,waitTokenError:waitTokenError,transferPoolSize:transferPoolSize,downloadMode:downloadMode,filetype:filetype,signing:signing};class REST{constructor(e){this.options=lodash.assign({agent_version:utils.version,local:local,url:url,user_agent:user_agent,signing:signing},e),this.log=this.options.log}async list(e){try{const s=await utils.get(e,this.options),o=e.match(/^[a-z_]+/i)[0];return Promise.resolve(s[`${o}s`])}catch(t){return this.log.error(`list error ${String(t)}`),Promise.reject(t)}}async read(e,t){try{const o=await utils.get(`${e}/${t}`,this.options);return Promise.resolve(o)}catch(s){return this.log.error("read",s),Promise.reject(s)}}async user(e){let t;if(this.options.local)t={accounts:[{id_user_account:"none",number:"NONE",name:"None"}]};else try{t=await utils.get("user",this.options)}catch(s){return e?e(s):Promise.reject(s)}return e?e(null,t):Promise.resolve(t)}async instanceToken(e,t){try{const o=await utils.post("token",{id_workflow_instance:e},lodash.assign({},this.options,{legacy_form:!0}));return t?t(null,o):Promise.resolve(o)}catch(s){return t?t(s):Promise.reject(s)}}async installToken(e,t){try{const o=await utils.post("token/install",{id_workflow:e},lodash.assign({},this.options,{legacy_form:!0}));return t?t(null,o):Promise.resolve(o)}catch(s){return t?t(s):Promise.reject(s)}}async attributes(e){try{const s=await this.list("attribute");return e?e(null,s):Promise.resolve(s)}catch(t){return e?e(t):Promise.reject(t)}}async workflows(e){try{const s=await this.list("workflow");return e?e(null,s):Promise.resolve(s)}catch(t){return e?e(t):Promise.reject(t)}}async amiImages(e){if(this.options.local){const t=new Error("amiImages unsupported in local mode");return e?e(t):Promise.reject(t)}try{const s=this.list("ami_image");return e?e(null,s):Promise.resolve(s)}catch(t){return e?e(t):Promise.reject(t)}}async amiImage(e,t,s){let o,i,r,n;if(e&&t&&s instanceof Function?(o=e,i=t,r=s,n="update"):e&&t instanceof Object&&!(t instanceof Function)?(o=e,i=t,n="update"):e instanceof Object&&t instanceof Function?(i=e,r=t,n="create"):e instanceof Object&&!t?(i=e,n="create"):(n="read",o=e,r=t instanceof Function?t:null),this.options.local){const e=new Error("ami_image unsupported in local mode");return r?r(e):Promise.reject(e)}if("update"===n)try{const e=await utils.put("ami_image",o,i,this.options);return r?r(null,e):Promise.resolve(e)}catch(a){return r?r(a):Promise.reject(a)}if("create"===n)try{const e=await utils.post("ami_image",i,this.options);return r?r(null,e):Promise.resolve(e)}catch(a){return r?r(a):Promise.reject(a)}if(!o){const e=new Error("no id_ami_image specified");return r?r(e):Promise.reject(e)}try{const e=await this.read("ami_image",o);return r?r(null,e):Promise.resolve(e)}catch(a){return r?r(a):Promise.reject(a)}}async workflow(e,t,s){let o,i,r,n;if(e&&t&&s instanceof Function?(o=e,i=t,r=s,n="update"):e&&t instanceof Object&&!(t instanceof Function)?(o=e,i=t,n="update"):e instanceof Object&&t instanceof Function?(i=e,r=t,n="create"):e instanceof Object&&!t?(i=e,n="create"):(n="read",o=e,r=t instanceof Function?t:null),"update"===n)try{const e=await utils.put("workflow",o,i,lodash.assign({},this.options,{legacy_form:!0}));return r?r(null,e):Promise.resolve(e)}catch(u){return r?r(u):Promise.reject(u)}if("create"===n)try{const e=await utils.post("workflow",i,lodash.assign({},this.options,{legacy_form:!0}));return r?r(null,e):Promise.resolve(e)}catch(u){return r?r(u):Promise.reject(u)}if(!o){const e=new Error("no workflow id specified");return r?r(e):Promise.reject(e)}const a={};try{const e=await this.read("workflow",o);if(e.error)throw new Error(e.error);lodash.merge(a,e)}catch(u){return this.log.error(`${o}: error fetching workflow ${String(u)}`),r?r(u):Promise.reject(u)}lodash.merge(a,{params:{}});try{const e=await utils.get(`workflow/config/${o}`,this.options);if(e.error)throw new Error(e.error);lodash.merge(a,e)}catch(u){return this.log.error(`${o}: error fetching workflow config ${String(u)}`),r?r(u):Promise.reject(u)}const l=lodash.filter(a.params,{widget:"ajax_dropdown"}),c=[...l.map((e,t)=>{const s=l[t];return new Promise(async(e,t)=>{const o=s.values.source.replace("{{EPI2ME_HOST}}","").replace(/&?apikey=\{\{EPI2ME_API_KEY\}\}/,"");try{const i=(await utils.get(o,this.options))[s.values.data_root];return i&&(s.values=i.map(e=>({label:e[s.values.items.label_key],value:e[s.values.items.value_key]}))),e()}catch(u){return this.log.error(`failed to fetch ${o}`),t(u)}})})];try{return await Promise.all(c),r?r(null,a):Promise.resolve(a)}catch(u){return this.log.error(`${o}: error fetching config and parameters ${String(u)}`),r?r(u):Promise.reject(u)}}async startWorkflow(e,t){return utils.post("workflow_instance",e,lodash.assign({},this.options,{legacy_form:!0}),t)}stopWorkflow(e,t){return utils.put("workflow_instance/stop",e,null,lodash.assign({},this.options,{legacy_form:!0}),t)}async workflowInstances(e,t){let s,o;if(!e||e instanceof Function||void 0!==t?(s=e,o=t):o=e,o&&o.run_id)try{const e=(await utils.get(`workflow_instance/wi?show=all&columns[0][name]=run_id;columns[0][searchable]=true;columns[0][search][regex]=true;columns[0][search][value]=${o.run_id};`,this.options)).data.map(e=>({id_workflow_instance:e.id_ins,id_workflow:e.id_flo,run_id:e.run_id,description:e.desc,rev:e.rev}));return s?s(null,e):Promise.resolve(e)}catch(i){return s?s(i):Promise.reject(i)}try{const e=await this.list("workflow_instance");return s?s(null,e):Promise.resolve(e)}catch(i){return s?s(i):Promise.reject(i)}}async workflowInstance(e,t){try{const o=await this.read("workflow_instance",e);return t?t(null,o):Promise.resolve(o)}catch(s){return t?t(s):Promise.reject(s)}}workflowConfig(e,t){return utils.get(`workflow/config/${e}`,this.options,t)}async register(e,t,s){let o,i;t&&t instanceof Function?i=t:(o=t,i=s);try{const t=await utils.put("reg",e,{description:o||`${os__default.userInfo().username}@${os__default.hostname()}`},lodash.assign({},this.options,{signing:!1}));return i?i(null,t):Promise.resolve(t)}catch(r){return i?i(r):Promise.reject(r)}}async datasets(e,t){let s,o;!e||e instanceof Function||void 0!==t?(s=e,o=t):o=e,o||(o={}),o.show||(o.show="mine");try{const e=await this.list(`dataset?show=${o.show}`);return s?s(null,e):Promise.resolve(e)}catch(i){return s?s(i):Promise.reject(i)}}async dataset(e,t){if(!this.options.local)try{const o=await this.read("dataset",e);return t?t(null,o):Promise.resolve(o)}catch(s){return t?t(s):Promise.reject(s)}try{const o=(await this.datasets()).find(t=>t.id_dataset===e);return t?t(null,o):Promise.resolve(o)}catch(s){return t?t(s):Promise.reject(s)}}async fetchContent(e,t){const s=lodash.assign({},this.options,{skip_url_mangle:!0});try{const i=await utils.get(e,s);return t?t(null,i):Promise.resolve(i)}catch(o){return t?t(o):Promise.reject(o)}}}class REST_FS extends REST{async workflows(e){if(!this.options.local)return super.workflows(e);const t=path.join(this.options.url,"workflows");let s;try{return s=(await fs__default.readdir(t)).filter(e=>fs__default.statSync(path.join(t,e)).isDirectory()).map(e=>path.join(t,e,"workflow.json")).map(e=>fs__default.readJsonSync(e)),e?e(null,s):Promise.resolve(s)}catch(o){return this.log.warn(o),e?e(void 0):Promise.reject(void 0)}}async workflow(e,t,s){if(!this.options.local||!e||"object"===typeof e||s)return super.workflow(e,t,s);const o=path.join(this.options.url,"workflows"),i=path.join(o,e,"workflow.json");try{const e=await fs__default.readJson(i);return s?s(null,e):Promise.resolve(e)}catch(r){return s?s(r):Promise.reject(r)}}async workflowInstances(e,t){if(!this.options.local)return super.workflowInstances(e,t);let s,o;if(!e||e instanceof Function||void 0!==t?(s=e,o=t):o=e,o){const e=new Error("querying of local instances unsupported in local mode");return s?s(e):Promise.reject(e)}const i=path.join(this.options.url,"instances");try{let e=await fs__default.readdir(i);return e=(e=e.filter(e=>fs__default.statSync(path.join(i,e)).isDirectory())).map(e=>{const t=path.join(i,e,"workflow.json");let s;try{s=fs__default.readJsonSync(t)}catch(o){s={id_workflow:"-",description:"-",rev:"0.0"}}return s.id_workflow_instance=e,s.filename=t,s}),s?s(null,e):Promise.resolve(e)}catch(r){return s?s(r):Promise.reject(r)}}async datasets(e,t){if(!this.options.local)return super.datasets(e,t);let s,o;if(!e||e instanceof Function||void 0!==t?(s=e,o=t):o=e,o||(o={}),o.show||(o.show="mine"),"mine"!==o.show)return s(new Error("querying of local datasets unsupported in local mode"));const i=path.join(this.options.url,"datasets");try{let e=await fs__default.readdir(i);e=e.filter(e=>fs__default.statSync(path.join(i,e)).isDirectory());let t=0;return e=e.sort().map(e=>({is_reference_dataset:!0,summary:null,dataset_status:{status_label:"Active",status_value:"active"},size:0,prefix:e,id_workflow_instance:null,id_account:null,is_consented_human:null,data_fields:null,component_id:null,uuid:e,is_shared:!1,id_dataset:t+=1,id_user:null,last_modified:null,created:null,name:e,source:e,attributes:null})),s?s(null,e):Promise.resolve(e)}catch(r){return this.log.warn(r),s?s(null,[]):Promise.resolve([])}}async bundleWorkflow(e,t,s){return utils.pipe(`workflow/bundle/${e}.tar.gz`,t,this.options,s)}}class db{constructor(e){this.db=fs.mkdirp(e).then(()=>sqlite.open(path.join(e,"db.sqlite"),{Promise:Promise}).then(e=>e.migrate()))}async uploadFile(e){return(await this.db).run("INSERT INTO uploads VALUES(?)",e)}async skipFile(e){return(await this.db).run("INSERT INTO skips VALUES(?)",e)}async seenUpload(e){return(await this.db).get("SELECT * FROM uploads u, skips s WHERE u.filename=? OR s.filename=? LIMIT 1",e,e)}}class EPI2ME{constructor(e){let t;if((t="string"===typeof e||"object"===typeof e&&e.constructor===String?JSON.parse(e):e||{}).log){if(!lodash.every([t.log.info,t.log.warn,t.log.error,t.log.debug],lodash.isFunction))throw new Error('expected log object to have "error", "debug", "info" and "warn" methods');this.log=t.log}else this.log={info:e=>{console.info(`[${(new Date).toISOString()}] INFO: ${e}`)},debug:e=>{console.debug(`[${(new Date).toISOString()}] DEBUG: ${e}`)},warn:e=>{console.warn(`[${(new Date).toISOString()}] WARN: ${e}`)},error:e=>{console.error(`[${(new Date).toISOString()}] ERROR: ${e}`)}};this.states={upload:{filesCount:0,success:{files:0,bytes:0,reads:0},failure:{},types:{},niceTypes:"",progress:{bytes:0,total:0}},download:{progress:{},success:{files:0,reads:0,bytes:0},fail:0,failure:{},types:{},niceTypes:""},warnings:[]},this.config={options:lodash.defaults(t,DEFAULTS),instance:{id_workflow_instance:t.id_workflow_instance,inputQueueName:null,outputQueueName:null,outputQueueURL:null,discoverQueueCache:{},bucket:null,bucketFolder:null,remote_addr:null,chain:null,key_id:null}},this.config.instance.awssettings={region:this.config.options.region},this.config.options.inputFolder&&(this.config.options.uploadedFolder&&"+uploaded"!==this.config.options.uploadedFolder?this.uploadTo=this.config.options.uploadedFolder:this.uploadTo=path.join(this.config.options.inputFolder,"uploaded"),this.skipTo=path.join(this.config.options.inputFolder,"skip")),this.REST=new REST_FS(lodash.merge({},{log:this.log},this.config.options))}async stopEverything(){this.log.debug("stopping watchers"),this.downloadCheckInterval&&(this.log.debug("clearing downloadCheckInterval interval"),clearInterval(this.downloadCheckInterval),this.downloadCheckInterval=null),this.stateCheckInterval&&(this.log.debug("clearing stateCheckInterval interval"),clearInterval(this.stateCheckInterval),this.stateCheckInterval=null),this.fileCheckInterval&&(this.log.debug("clearing fileCheckInterval interval"),clearInterval(this.fileCheckInterval),this.fileCheckInterval=null),this.downloadWorkerPool&&(this.log.debug("clearing downloadWorkerPool"),await Promise$1.all(Object.values(this.downloadWorkerPool)),this.downloadWorkerPool=null);const{id_workflow_instance:e}=this.config.instance;if(e){try{await this.REST.stopWorkflow(e)}catch(t){return this.log.error(`Error stopping instance: ${String(t)}`),Promise$1.reject(t)}this.log.info(`workflow instance ${e} stopped`)}return Promise$1.resolve()}async session(){if(this.sessioning)return Promise$1.resolve();if(!this.states.sts_expiration||this.states.sts_expiration&&this.states.sts_expiration<=Date.now()){this.sessioning=!0;try{await this.fetchInstanceToken(),this.sessioning=!1}catch(e){return this.sessioning=!1,this.log.error(`session error ${String(e)}`),Promise$1.reject(e)}}return Promise$1.resolve()}async fetchInstanceToken(){if(!this.config.instance.id_workflow_instance)return Promise$1.reject(new Error("must specify id_workflow_instance"));if(this.states.sts_expiration&&this.states.sts_expiration>Date.now())return Promise$1.resolve();this.log.debug("new instance token needed");try{const t=await this.REST.instanceToken(this.config.instance.id_workflow_instance);this.log.debug(`allocated new instance token expiring at ${t.expiration}`),this.states.sts_expiration=new Date(t.expiration).getTime()-60*this.config.options.sessionGrace,this.config.options.proxy&&AWS.config.update({httpOptions:{agent:proxy(this.config.options.proxy,!0)}}),AWS.config.update(this.config.instance.awssettings),AWS.config.update(t)}catch(e){this.log.warn(`failed to fetch instance token: ${String(e)}`)}return Promise$1.resolve()}async sessionedS3(){return await this.session(),new AWS.S3({useAccelerateEndpoint:"on"===this.config.options.awsAcceleration})}async sessionedSQS(){return await this.session(),new AWS.SQS}reportProgress(){const{upload:e,download:t}=this.states;this.log.info(`Progress: ${JSON.stringify({progress:{download:t,upload:e}})}`)}async autoStart(e,t){let s;try{s=await this.REST.startWorkflow(e)}catch(o){const e=`Failed to start workflow: ${String(o)}`;return this.log.warn(e),t?t(e):Promise$1.reject(o)}return this.config.workflow=JSON.parse(JSON.stringify(e)),this.log.debug("instance",JSON.stringify(s)),this.log.debug("workflow config",JSON.stringify(this.config.workflow)),this.autoConfigure(s,t)}async autoJoin(e,t){let s;this.config.instance.id_workflow_instance=e;try{s=await this.REST.workflowInstance(e)}catch(o){const e=`Failed to join workflow instance: ${String(o)}`;return this.log.warn(e),t?t(e):Promise$1.reject(o)}return"stopped"===s.state?(this.log.warn(`workflow ${e} is already stopped`),t?t("could not join workflow"):Promise$1.reject(new Error("could not join workflow"))):(this.config.workflow=this.config.workflow||{},this.log.debug("instance",JSON.stringify(s)),this.log.debug("workflow config",JSON.stringify(this.config.workflow)),this.autoConfigure(s,t))}async autoConfigure(e,t){if(["id_workflow_instance","id_workflow","remote_addr","key_id","bucket","user_defined"].forEach(t=>{this.config.instance[t]=e[t]}),this.config.instance.inputQueueName=e.inputqueue,this.config.instance.outputQueueName=e.outputqueue,this.config.instance.awssettings.region=e.region||this.config.options.region,this.config.instance.bucketFolder=`${e.outputqueue}/${e.id_user}/${e.id_workflow_instance}`,e.chain)if("object"===typeof e.chain)this.config.instance.chain=e.chain;else try{this.config.instance.chain=JSON.parse(e.chain)}catch(r){throw new Error(`exception parsing chain JSON ${String(r)}`)}if(!this.config.options.inputFolder)throw new Error("must set inputFolder");if(!this.config.options.outputFolder)throw new Error("must set outputFolder");if(!this.config.instance.bucketFolder)throw new Error("bucketFolder must be set");if(!this.config.instance.inputQueueName)throw new Error("inputQueueName must be set");if(!this.config.instance.outputQueueName)throw new Error("outputQueueName must be set");this.db=new db(this.config.options.inputFolder),fs__default.mkdirpSync(this.config.options.outputFolder);const s=this.config.instance.id_workflow_instance?`telemetry-${this.config.instance.id_workflow_instance}.log`:"telemetry.log",o=path.join(this.config.options.outputFolder,"epi2me-logs"),i=path.join(o,s);return fs__default.mkdirp(o,e=>{if(e&&!String(e).match(/EEXIST/))this.log.error(`error opening telemetry log stream: mkdirpException:${String(e)}`);else try{this.telemetryLogStream=fs__default.createWriteStream(i,{flags:"a"}),this.log.info(`logging telemetry to ${i}`)}catch(t){this.log.error(`error opening telemetry log stream: ${String(t)}`)}}),t&&t(null,this.config.instance),this.downloadCheckInterval=setInterval(()=>{this.checkForDownloads()},1e3*this.config.options.downloadCheckInterval),this.stateCheckInterval=setInterval(async()=>{try{const s=await this.REST.workflowInstance(this.config.instance.id_workflow_instance);if("stopped"===s.state){this.log.warn(`instance was stopped remotely at ${s.stop_date}. shutting down the workflow.`);try{const t=await this.stopEverything();"function"===typeof t.config.options.remoteShutdownCb&&t.config.options.remoteShutdownCb(`instance was stopped remotely at ${s.stop_date}`)}catch(e){this.log.error(`Error whilst stopping: ${String(e)}`)}}}catch(t){this.log.warn(`failed to check instance state: ${t&&t.error?t.error:t}`)}},1e3*this.config.options.stateCheckInterval),await this.session(),this.reportProgress(),this.loadUploadFiles(),this.fileCheckInterval=setInterval(this.loadUploadFiles.bind(this),1e3*this.config.options.fileCheckInterval),Promise$1.resolve(e)}async checkForDownloads(){if(this.checkForDownloadsRunning)return this.log.debug("checkForDownloads already running"),Promise$1.resolve();this.checkForDownloadsRunning=!0;try{const t=await this.discoverQueue(this.config.instance.outputQueueName),s=await this.queueLength(t);if(s)return this.log.debug(`downloads available: ${s}`),await this.downloadAvailable(),this.checkForDownloadsRunning=!1,Promise$1.resolve();this.log.debug("no downloads available")}catch(e){this.log.warn(`checkForDownloads error ${String(e)}`),this.states.download.failure||(this.states.download.failure={}),this.states.download.failure[e]=this.states.download.failure[e]?this.states.download.failure[e]+1:1}return this.checkForDownloadsRunning=!1,Promise$1.resolve()}async downloadAvailable(){const e=Object.keys(this.downloadWorkerPool||{}).length;if(e>=this.config.options.transferPoolSize)return this.log.debug(`${e} downloads already queued`),Promise$1.resolve();let t;try{const o=await this.discoverQueue(this.config.instance.outputQueueName);this.log.debug("fetching messages");const i=await this.sessionedSQS();t=await i.receiveMessage({AttributeNames:["All"],QueueUrl:o,VisibilityTimeout:this.config.options.inFlightDelay,MaxNumberOfMessages:this.config.options.transferPoolSize-e,WaitTimeSeconds:this.config.options.waitTimeSeconds}).promise()}catch(s){return this.log.error(`receiveMessage exception: ${String(s)}`),this.states.download.failure[s]=this.states.download.failure[s]?this.states.download.failure[s]+1:1,Promise$1.reject(s)}return this.receiveMessages(t)}storeState(e,t,s,o){const i=o||{};this.states[e]||(this.states[e]={}),this.states[e][t]||(this.states[e][t]={}),"incr"===s?Object.keys(i).forEach(s=>{this.states[e][t][s]=this.states[e][t][s]?this.states[e][t][s]+parseInt(i[s],10):parseInt(i[s],10)}):Object.keys(i).forEach(s=>{this.states[e][t][s]=this.states[e][t][s]?this.states[e][t][s]-parseInt(i[s],10):-parseInt(i[s],10)});try{this.states[e].success.niceReads=utils.niceSize(this.states[e].success.reads)}catch(n){this.states[e].success.niceReads=0}try{this.states[e].progress.niceSize=utils.niceSize(this.states[e].success.bytes+this.states[e].progress.bytes||0)}catch(n){this.states[e].progress.niceSize=0}try{this.states[e].success.niceSize=utils.niceSize(this.states[e].success.bytes)}catch(n){this.states[e].success.niceSize=0}this.states[e].niceTypes=Object.keys(this.states[e].types||{}).sort().map(t=>`${this.states[e].types[t]} ${t}`).join(", ");const r=Date.now();(!this.stateReportTime||r-this.stateReportTime>2e3)&&(this.stateReportTime=r,this.reportProgress())}uploadState(e,t,s){return this.storeState("upload",e,t,s)}downloadState(e,t,s){return this.storeState("download",e,t,s)}async loadUploadFiles(){if(this.dirScanInProgress)return Promise$1.resolve();this.dirScanInProgress=!0,this.log.debug("upload: started directory scan");try{const t=e=>this.db.seenUpload(e),s=await utils.loadInputFiles(this.config.options,this.log,t);let o=0;const i=()=>new Promise$1(async e=>{if(o>this.config.options.transferPoolSize)return void setTimeout(e,1e3);const t=s.splice(0,this.config.options.transferPoolSize-o);o+=t.length;try{await this.enqueueUploadFiles(t)}catch(i){this.log.error(`upload: exception in enqueueUploadFiles: ${String(i)}`)}o-=t.length,e()});for(;s.length;)await i()}catch(e){this.log.error(`upload: exception in loadInputFiles: ${String(e)}`)}return this.dirScanInProgress=!1,this.log.debug("upload: finished directory scan"),Promise$1.resolve()}async enqueueUploadFiles(e){let t,s=0,o=0,i={};if(!lodash.isArray(e)||!e.length)return Promise$1.resolve();if("workflow"in this.config)if("workflow_attributes"in this.config.workflow)i=this.config.workflow.workflow_attributes;else if("attributes"in this.config.workflow){let{attributes:e}=this.config.workflow.attributes;if(e||(e={}),"epi2me:max_size"in e&&(i.max_size=parseInt(e["epi2me:max_size"],10)),"epi2me:max_files"in e&&(i.max_files=parseInt(e["epi2me:max_files"],10)),"epi2me:category"in e){e["epi2me:category"].includes("storage")&&(i.requires_storage=!0)}}if("requires_storage"in i&&i.requires_storage&&!("storage_account"in this.config.workflow))return t="ERROR: Workflow requires storage enabled. Please provide a valid storage account [ --storage ].",this.log.error(t),this.states.warnings.push(t),Promise$1.resolve();if("max_size"in i&&(o=parseInt(i.max_size,10)),"max_files"in i&&(s=parseInt(i.max_files,10),e.length>s))return t=`ERROR: ${e.length} files found. Workflow can only accept ${s}. Please move the extra files away.`,this.log.error(t),this.states.warnings.push(t),Promise$1.resolve();this.log.info(`upload: enqueueUploadFiles: ${e.length} new files`),this.states.upload.filesCount+=e.length;const r=e.map(async e=>{const i=e;if(s&&this.states.upload.filesCount>s)t=`Maximum ${s} file(s) already uploaded. Moving ${i.name} into skip folder`,this.log.error(t),this.states.warnings.push(t),this.states.upload.filesCount-=1,i.skip="SKIP_TOO_MANY";else if(o&&i.size>o)t=`${i.name} is over ${o.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}. Moving into skip folder`,i.skip="SKIP_TOO_BIG",this.states.upload.filesCount-=1,this.log.error(t),this.states.warnings.push(t);else try{i.stats=await filestats(i.path)}catch(r){this.error(`failed to stat ${i.path}: ${String(r)}`)}return this.uploadJob(i)});try{return await Promise$1.all(r),this.log.info(`upload: inputBatchQueue (${r.length} jobs) complete`),this.loadUploadFiles()}catch(n){return this.log.error(`upload: enqueueUploadFiles exception ${String(n)}`),Promise$1.reject(n)}}async uploadJob(e){if("skip"in e)return this.db.skipFile(e.path);let t,s;try{this.log.info(`upload: ${e.id} starting`),t=await this.uploadHandler(e),this.log.info(`upload: ${t.id} uploaded and notified`)}catch(o){s=o,this.log.error(`upload: ${e.id} done, but failed: ${String(s)}`)}if(t||(t={}),s)this.log.error(`uploadJob ${s}`),this.states.upload.failure||(this.states.upload.failure={}),this.states.upload.failure[s]=this.states.upload.failure[s]?this.states.upload.failure[s]+1:1;else if(this.uploadState("success","incr",lodash.merge({files:1},t.stats)),t.name){const e=path.extname(t.name);this.uploadState("types","incr",{[e]:1})}return Promise$1.resolve()}async receiveMessages(e){return e&&e.Messages&&e.Messages.length?(this.downloadWorkerPool||(this.downloadWorkerPool={}),e.Messages.forEach(e=>{new Promise$1((t,s)=>{this.downloadWorkerPool[e.MessageId]=1;const o=setTimeout(()=>{this.log.error(`this.downloadWorkerPool timeoutHandle. Clearing queue slot for message: ${e.MessageId}`),s(new Error("download timed out"))},1e3*(60+this.config.options.downloadTimeout));this.processMessage(e).then(()=>{t()}).catch(e=>{this.log.error(`processMessage ${String(e)}`),t()}).finally(()=>{clearTimeout(o)})}).then(()=>{delete this.downloadWorkerPool[e.MessageId]})}),this.log.info(`downloader queued ${e.Messages.length} messages for processing`),Promise$1.resolve()):(this.log.info("complete (empty)"),Promise$1.resolve())}async deleteMessage(e){try{const s=await this.discoverQueue(this.config.instance.outputQueueName);return(await this.sessionedSQS()).deleteMessage({QueueUrl:s,ReceiptHandle:e.ReceiptHandle}).promise()}catch(t){return this.log.error(`deleteMessage exception: ${String(t)}`),this.states.download.failure[t]=this.states.download.failure[t]?this.states.download.failure[t]+1:1,Promise$1.reject(t)}}async processMessage(e){let t,s;if(!e)return this.log.debug("download.processMessage: empty message"),Promise$1.resolve();"Attributes"in e&&("ApproximateReceiveCount"in e.Attributes?this.log.debug(`download.processMessage: ${e.MessageId} / ${e.Attributes.ApproximateReceiveCount}`):this.log.debug(`download.processMessage: ${e.MessageId} / NA `));try{t=JSON.parse(e.Body)}catch(a){this.log.error(`error parsing JSON message.Body from message: ${JSON.stringify(e)} ${String(a)}`);try{await this.deleteMessage(e)}catch(l){this.log.error(`Exception deleting message: ${String(l)}`)}return Promise$1.resolve()}if(t.telemetry){const{telemetry:s}=t;if(s.tm_path)try{this.log.debug(`download.processMessage: ${e.MessageId} fetching telemetry`);const o=await this.sessionedS3(),i=await o.getObject({Bucket:t.bucket,Key:s.tm_path}).promise();this.log.info(`download.processMessage: ${e.MessageId} fetched telemetry`),s.batch=i.Body.toString("utf-8").split("\n").filter(e=>e&&e.length>0).map(e=>{try{return JSON.parse(e)}catch(l){return this.log.error(`Telemetry Batch JSON Parse error: ${String(l)}`),e}})}catch(c){this.log.error(`Could not fetch telemetry JSON: ${String(c)}`)}try{this.telemetryLogStream.write(JSON.stringify(s)+os.EOL)}catch(u){this.log.error(`error writing telemetry: ${u}`)}this.config.options.telemetryCb&&this.config.options.telemetryCb(s)}if(!t.path)return this.log.warn("nothing to download"),Promise$1.resolve();const o=t.path.match(/[\w\W]*\/([\w\W]*?)$/),i=o?o[1]:"";if(s=this.config.options.outputFolder,t.telemetry&&t.telemetry.hints&&t.telemetry.hints.folder){this.log.debug(`using folder hint ${t.telemetry.hints.folder}`);const e=t.telemetry.hints.folder.split("/").map(e=>e.toUpperCase());s=path.join.apply(null,[s,...e])}fs__default.mkdirpSync(s);const r=path.join(s,i);if("data+telemetry"===this.config.options.downloadMode){this.log.debug(`download.processMessage: ${e.MessageId} downloading ${t.path} to ${r}`);const s=await this.sessionedS3(),o=new Promise$1(async o=>{this.initiateDownloadStream(s,t,e,r,o)});return await o,this.log.info(`download.processMessage: ${e.MessageId} downloaded ${t.path} to ${r}`),Promise$1.resolve()}try{await this.deleteMessage(e)}catch(l){this.log.error(`Exception deleting message: ${String(l)}`)}const n=t.telemetry.batch_summary&&t.telemetry.batch_summary.reads_num?t.telemetry.batch_summary.reads_num:1;return this.downloadState("success","incr",{files:1,reads:n}),Promise$1.resolve()}initiateDownloadStream(e,t,s,o,i){let r,n,a,l;const c=()=>{if("on"===this.config.options.filter)try{fs__default.remove(o,e=>{e?this.log.warn(`failed to remove file: ${o}`):this.log.warn(`removed failed download file: ${o} ${e}`)})}catch(e){this.log.warn(`failed to remove file. unlinkException: ${o} ${String(e)}`)}},u=()=>{if(!r.networkStreamError)try{r.networkStreamError=1,r.close(),c(),l.destroy&&(this.log.error(`destroying readstream for ${o}`),l.destroy())}catch(e){this.log.error(`error handling sream error: ${e.message}`)}};try{const s={Bucket:t.bucket,Key:t.path};r=fs__default.createWriteStream(o);const n=e.getObject(s);n.on("httpHeaders",(e,t)=>{this.downloadState("progress","incr",{total:parseInt(t["content-length"],10)})}),l=n.createReadStream()}catch(h){return this.log.error(`getObject/createReadStream exception: ${String(h)}`),void(i&&i())}l.on("error",e=>{this.log.error(`error in download readstream ${e}`);try{u()}catch(t){this.log.error(`error handling readStreamError: ${t}`)}}),r.on("finish",async()=>{if(!r.networkStreamError){this.log.debug(`downloaded ${o}`);try{const t=path.extname(o),s=await filestats(o);this.downloadState("success","incr",lodash.merge({files:1},s)),this.downloadState("types","incr",{[t]:1}),this.downloadState("progress","decr",{total:s.bytes,bytes:s.bytes})}catch(e){this.log.warn(`failed to stat ${o}: ${String(e)}`)}try{this.reportProgress();const s=!(!t.telemetry||!t.telemetry.json)&&t.telemetry.json.exit_status;s&&this.config.options.dataCb&&this.config.options.dataCb(o,s)}catch(e){this.log.warn(`failed to fs.stat file: ${e}`)}try{await this.deleteMessage(s)}catch(i){this.log.error(`Exception deleting message: ${String(i)}`)}}}),r.on("close",e=>{this.log.debug(`closing writeStream ${o}`),e&&this.log.error(`error closing writestream ${e}`),clearTimeout(n),clearInterval(a),setTimeout(this.checkForDownloads.bind(this)),i()}),r.on("error",e=>{this.log.error(`error in download write stream ${e}`),u()});const d=()=>{this.log.warn("transfer timed out"),u()};n=setTimeout(d,1e3*this.config.options.downloadTimeout);a=setInterval(async()=>{const e=this.config.instance.outputQueueURL,t=s.ReceiptHandle;this.log.debug({message_id:s.MessageId},"updateVisibility");try{await this.sqs.changeMessageVisibility({QueueUrl:e,ReceiptHandle:t,VisibilityTimeout:this.config.options.inFlightDelay}).promise()}catch(o){this.log.error({message_id:s.MessageId,queue:e,error:o},"Error setting visibility"),clearInterval(a)}},900*this.config.options.inFlightDelay),l.on("data",e=>{clearTimeout(n),n=setTimeout(d,1e3*this.config.options.downloadTimeout),this.downloadState("progress","incr",{bytes:e.length})}).pipe(r)}async uploadHandler(e){const t=await this.sessionedS3();let s;const o=path.join(this.config.options.inputFolder,e.name),i=`${this.config.instance.bucketFolder}/component-0/${e.name}/${e.name}`;let r;return new Promise$1((n,a)=>{const l=()=>{s&&!s.closed&&s.close(),a(new Error(`${e.name} timed out`))};r=setTimeout(l,1e3*(this.config.options.uploadTimeout+5));try{s=fs__default.createReadStream(o)}catch(c){return clearTimeout(r),void a(c)}s.on("error",e=>{s.close();let t="error in upload readstream";e&&e.message&&(t+=`: ${e.message}`),clearTimeout(r),a(new Error(t))}),s.on("open",()=>{const o={Bucket:this.config.instance.bucket,Key:i,Body:s};this.config.instance.key_id&&(o.SSEKMSKeyId=this.config.instance.key_id,o.ServerSideEncryption="aws:kms"),e.size&&(o["Content-Length"]=e.size),this.uploadState("progress","incr",{total:e.size});let c=0;const u=t.upload(o,{partSize:10485760,queueSize:1});u.on("httpUploadProgress",e=>{this.uploadState("progress","incr",{bytes:e.loaded-c}),c=e.loaded,clearTimeout(r),r=setTimeout(l,1e3*(this.config.options.uploadTimeout+5))}),u.promise().then(()=>{this.log.info(`${e.id} S3 upload complete`),s.close(),clearTimeout(r),this.uploadComplete(i,e).then(()=>{n(e)}).catch(e=>{a(e)}).finally(()=>{this.uploadState("progress","decr",{total:e.size,bytes:e.size})})}).catch(t=>{this.log.warn(`${e.id} uploadStreamError ${t}`),a(t)})})})}async discoverQueue(e){if(this.config.instance.discoverQueueCache[e])return Promise$1.resolve(this.config.instance.discoverQueueCache[e]);let t;this.log.debug(`discovering queue for ${e}`);try{const o=await this.sessionedSQS();t=await o.getQueueUrl({QueueName:e}).promise()}catch(s){return this.log.error(`Error: failed to find queue for ${e}: ${String(s)}`),Promise$1.reject(s)}return this.log.debug(`found queue ${t.QueueUrl}`),this.config.instance.discoverQueueCache[e]=t.QueueUrl,Promise$1.resolve(t.QueueUrl)}async uploadComplete(e,t){this.log.info(`${t.id} uploaded to S3: ${e}`);const s={bucket:this.config.instance.bucket,outputQueue:this.config.instance.outputQueueName,remote_addr:this.config.instance.remote_addr,user_defined:this.config.instance.user_defined||null,apikey:this.config.options.apikey,id_workflow_instance:this.config.instance.id_workflow_instance,id_master:this.config.instance.id_workflow,utc:(new Date).toISOString(),path:e,prefix:e.substring(0,e.lastIndexOf("/"))};if(this.config.instance.chain)try{s.components=JSON.parse(JSON.stringify(this.config.instance.chain.components)),s.targetComponentId=this.config.instance.chain.targetComponentId}catch(o){return this.log.error(`${t.id} exception parsing components JSON ${String(o)}`),Promise$1.reject(o)}if(this.config.instance.key_id&&(s.key_id=this.config.instance.key_id),this.config.options.agent_address)try{s.agent_address=JSON.parse(this.config.options.agent_address)}catch(i){this.log.error(`${t.id} Could not parse agent_address ${String(i)}`)}s.components&&Object.keys(s.components).forEach(e=>{"uploadMessageQueue"===s.components[e].inputQueueName&&(s.components[e].inputQueueName=this.uploadMessageQueue),"downloadMessageQueue"===s.components[e].inputQueueName&&(s.components[e].inputQueueName=this.downloadMessageQueue)});try{const e=await this.discoverQueue(this.config.instance.inputQueueName),o=await this.sessionedSQS();this.log.info(`${t.id} sending SQS message to input queue`),await o.sendMessage({QueueUrl:e,MessageBody:JSON.stringify(s)}).promise()}catch(r){return this.log.error(`${t.id} exception sending SQS message: ${String(r)}`),Promise$1.reject(r)}return this.log.info(`${t.id} SQS message sent. Move to uploaded`),this.db.uploadFile(t.path)}async queueLength(e){if(!e)return Promise$1.resolve();const t=e.match(/([\w\-_]+)$/)[0];this.log.debug(`querying queue length of ${t}`);try{const t=await this.sessionedSQS(),o=await t.getQueueAttributes({QueueUrl:e,AttributeNames:["ApproximateNumberOfMessages"]}).promise();if(o&&o.Attributes&&"ApproximateNumberOfMessages"in o.Attributes){let e=o.Attributes.ApproximateNumberOfMessages;return e=parseInt(e,10)||0,Promise$1.resolve(e)}}catch(s){return this.log.error(`error in getQueueAttributes ${String(s)}`),Promise$1.reject(s)}return Promise$1.resolve()}url(){return this.config.options.url}apikey(){return this.config.options.apikey}attr(e,t){if(!(e in this.config.options))throw new Error(`config object does not contain property ${e}`);return t?(this.config.options[e]=t,this):this.config.options[e]}stats(e){return this.states[e]}}EPI2ME.version=utils.version,EPI2ME.REST=REST_FS,module.exports=EPI2ME;
