/**
 * Copyright Metrichor Ltd. (An Oxford Nanopore Technologies Company) 2019
 */

import{merge as e,flatten as t,remove as s,assign as i,filter as r,every as o,isFunction as n,defaults as a,isArray as l}from"lodash";import c,{mkdirp as u}from"fs-extra";import h,{homedir as d,EOL as p}from"os";import g from"path";import f from"core-js/features/promise";import m from"axios";import w from"crypto";import{httpsOverHttps as y,httpsOverHttp as k}from"tunnel";import S from"aws-sdk";import b from"proxy-agent";import v from"sqlite";var $={name:"epi2me-api",version:"2019.9.4-1338",license:"MPL-2.0",repository:"https://git.oxfordnanolabs.local/metrichor/api.git",description:"API for communicating with the EPI2ME website(s)",main:"dist/index.js",module:"dist/index.es.js",dependencies:{"@lifeomic/axios-fetch":"^1.4.0","@types/axios":"^0.14.0","apollo-cache-inmemory":"^1.6.2","apollo-client":"^2.6.3","apollo-link":"^1.2.12","apollo-link-context":"^1.0.18","apollo-link-http":"^1.5.15","aws-sdk":"2.488.0",axios:"^0.19.0","core-js":"^3.1.4","fs-extra":"^8.1.0",graphql:"^14.4.2","graphql-tag":"^2.10.1",lodash:"4.17.11","proxy-agent":"3.1.0",save:"^2.4.0",sqlite:"^3.0.3",tunnel:"^0.0.6",yarn:"^1.16.0"},devDependencies:{"@babel/cli":"^7.5.0","@babel/core":"^7.5.0","@babel/plugin-proposal-object-rest-spread":"^7.5.0","@babel/preset-env":"^7.5.0","@babel/register":"^7.4.4","@types/bunyan":"^1.8.6","@types/rollup":"^0.54.0","@types/rollup-plugin-json":"^3.0.2","babel-eslint":"^10.0.2",bunyan:"^1.8.12",eslint:"6.0.1","eslint-config-airbnb-base":"^13.2.0","eslint-config-defaults":"9.0.0","eslint-config-prettier":"^6.0.0","eslint-plugin-babel":"^5.3.0","eslint-plugin-import":"^2.18.0","eslint-plugin-prettier":"^3.1.0",husky:"^3.0.0","lint-staged":"^9.0.2",mocha:"6.1.4",nyc:"^14.1.1",prettier:"^1.18.2","prettier-eslint":"^9.0.0",rollup:"^1.16.6","rollup-plugin-analyzer":"^3.0.1","rollup-plugin-cpy":"^2.0.0","rollup-plugin-eslint":"^7.0.0","rollup-plugin-generate-package-json":"^3.1.3","rollup-plugin-json":"^4.0.0","rollup-plugin-license":"^0.9.0","rollup-plugin-terser":"^5.1.0",sinon:"7.3.2",tmp:"0.1.0","xunit-file":"*"},browserslist:[">0.2%","not dead","not ie <= 11","not op_mini all"],"lint-staged":{"*.{ts,tsx,js,jsx}":["yarn fix-ts --fix","git add --force"],"*.{json,md,graphql}":["prettier --write","git add --force"]},scripts:{"build:version":'jq ".version=\\"$(date +%Y.%-m.%-d)-${PATCH:-$(date +%-H%M)}\\"" < package.json > package.json.tmp && mv package.json.tmp package.json',"lint-js":'eslint --ignore-path .eslintignore --ignore-pattern "!**/.*" .',"fix-js":"yarn run lint-js --fix",lint:"yarn lint-js",deps:"yarn install","clean:dist":"rm -rf dist","clean:build":"rm -rf build && rm -rf dist/lib",clean:"yarn clean:build && yarn clean:dist",test:"mocha --recursive --require @babel/register test",cover:"yarn deps && yarn lint && yarn nyc --reporter=html --reporter=text mocha --recursive --require @babel/register test",build:"yarn build:dist","rollup:build":"rollup -c","rollup:watch":"rollup -cw","build:dist":"yarn build:version && yarn clean:dist && yarn rollup:build"}};m.defaults.validateStatus=e=>e<=504;const _=["","K","M","G","T","P","E","Z"],E=function(){const t=(e,t)=>{e.headers||(e.headers={});let s=t;if(s||(s={}),!s.apikey)return;if(e.headers["X-EPI2ME-ApiKey"]=s.apikey,!s.apisecret)return;e.headers["X-EPI2ME-SignatureDate"]=(new Date).toISOString(),e.url.match(/^https:/)&&(e.url=e.url.replace(/:443/,"")),e.url.match(/^http:/)&&(e.url=e.url.replace(/:80/,""));const i=[e.url,Object.keys(e.headers).sort().filter(e=>e.match(/^x-epi2me/i)).map(t=>`${t}:${e.headers[t]}`).join("\n")].join("\n"),r=w.createHmac("sha1",s.apisecret).update(i).digest("hex");e.headers["X-EPI2ME-SignatureV0"]=r},s=async e=>{const t=e?e.data:null;if(!t)return Promise.reject(new Error("unexpected non-json response"));if(e&&e.status>=400){let s=`Network error ${e.status}`;return t.error&&(s=t.error),504===e.status&&(s="Please check your network connection and try again."),Promise.reject(new Error(s))}return t.error?Promise.reject(new Error(t.error)):Promise.resolve(t)};return{version:"2019.9.4-1338",headers:(s,i)=>{const{log:r}=e({log:{debug:()=>{}}},i);let o=i;if(o||(o={}),s.headers=e({Accept:"application/json","Content-Type":"application/json","X-EPI2ME-Client":o.user_agent||"api","X-EPI2ME-Version":o.agent_version||E.version},s.headers,o.headers),"signing"in o&&!o.signing||t(s,o),o.proxy){const e=o.proxy.match(/https?:\/\/((\S+):(\S+)@)?(\S+):(\d+)/),t=e[2],i=e[3],n={host:e[4],port:e[5]};t&&i&&(n.proxyAuth=`${t}:${i}`),o.proxy.match(/^https/)?(r.debug("using HTTPS over HTTPS proxy",JSON.stringify(n)),s.httpsAgent=y({proxy:n})):(r.debug("using HTTPS over HTTP proxy",JSON.stringify(n)),s.httpsAgent=k({proxy:n})),s.proxy=!1}},get:async(t,i)=>{const{log:r}=e({log:{debug:()=>{}}},i);let o,n=i.url,a=t;i.skip_url_mangle?o=a:(a=`/${a}`,o=(n=n.replace(/\/+$/,""))+(a=a.replace(/\/+/g,"/")));const l={url:o,gzip:!0};let c;E.headers(l,i);try{r.debug(`GET ${l.url}`),c=await m.get(l.url,l)}catch(u){return Promise.reject(u)}return s(c,i)},post:async(t,i,r)=>{const{log:o}=e({log:{debug:()=>{}}},r);let n=r.url;const a={url:`${n=n.replace(/\/+$/,"")}/${t.replace(/\/+/g,"/")}`,gzip:!0,data:i,headers:{}};if(r.legacy_form){const t=[],s=e({json:JSON.stringify(i)},i);Object.keys(s).sort().forEach(e=>{t.push(`${e}=${escape(s[e])}`)}),a.data=t.join("&"),a.headers["Content-Type"]="application/x-www-form-urlencoded"}E.headers(a,r);const{data:l}=a;let c;delete a.data;try{o.debug(`POST ${a.url}`),c=await m.post(a.url,l,a)}catch(u){return Promise.reject(u)}return s(c,r)},put:async(t,i,r,o)=>{const{log:n}=e({log:{debug:()=>{}}},o);let a=o.url;const l={url:`${a=a.replace(/\/+$/,"")}/${t.replace(/\/+/g,"/")}/${i}`,gzip:!0,data:r,headers:{}};if(o.legacy_form){const t=[],s=e({json:JSON.stringify(r)},r);Object.keys(s).sort().forEach(e=>{t.push(`${e}=${escape(s[e])}`)}),l.data=t.join("&"),l.headers["Content-Type"]="application/x-www-form-urlencoded"}E.headers(l,o);const{data:c}=l;let u;delete l.data;try{n.debug(`PUT ${l.url}`),u=await m.put(l.url,c,l)}catch(h){return Promise.reject(h)}return s(u,o)},niceSize(e,t){let s=t||0,i=e||0;return i>1e3?(i/=1e3,(s+=1)>=_.length?"???":this.niceSize(i,s)):0===s?`${i}${_[s]}`:`${i.toFixed(1)}${_[s]}`}}}();E.pipe=async(e,t,s,i)=>{let r=s.url,o=`/${e}`;const n={uri:(r=r.replace(/\/+$/,""))+(o=o.replace(/\/+/g,"/")),gzip:!0,headers:{"Accept-Encoding":"gzip",Accept:"application/gzip"}};return E.headers(n,s),s.proxy&&(n.proxy=s.proxy),i&&(n.onUploadProgress=i),n.responseType="stream",new Promise(async(e,s)=>{try{const r=c.createWriteStream(t);(await m.get(n.uri,n)).data.pipe(r),r.on("finish",e(t)),r.on("error",s(new Error("writer failed")))}catch(i){s(i)}})};let j=0;E.getFileID=()=>`FILE_${j+=1}`,E.lsRecursive=async(e,s,i)=>{const r=c.statSync(s);if(i){if(await i(s,r))return null}return r.isDirectory()?c.readdir(s).then(e=>e.map(e=>g.join(s,e))).then(t=>Promise.all(t.map(t=>E.lsRecursive(e,t,i)))).then(e=>t(e)):{name:g.parse(s).base,path:s,relative:s.replace(e,""),size:r.size,id:E.getFileID()}},E.loadInputFiles=async({inputFolder:e,outputFolder:t,filetype:i},r,o)=>{let n=i;n instanceof Array||(n=[n]),n=n.map(e=>e&&0!==e.indexOf(".")?`.${e}`:e);const a=await E.lsRecursive(e,e,async(e,s)=>{const i=g.basename(e),r=[new Promise((t,s)=>"downloads"===i||"skip"===i||"fail"===i||"fastq_fail"===i||"tmp"===i?s(new Error(`${e} failed basic filename`)):t("basic ok")),new Promise((r,o)=>{const a=n.length?new RegExp(`(?:${n.join("|")})$`):null;return e.split(g.sep).filter(e=>e.match(/^[.]/)).length||t&&i===g.basename(t)||a&&!e.match(a)&&s.isFile()?o(new Error(`${e} failed extended filename`)):r("extended ok")}),o?new Promise((t,s)=>{o(e).then(i=>i?s(new Error(`${e} failed extraFilter`)):t("extra ok"))}):Promise.resolve("extra skip")];return Promise.all(r).then(()=>null).catch(()=>"exclude")});return Promise.resolve(s(a,null))};var P=!1,I="https://epi2me.nanoporetech.com",T="EPI2ME API",x=!0,O={local:P,url:I,gqlUrl:"https://graphql.epi2me-dev.nanoporetech.com",user_agent:T,region:"eu-west-1",sessionGrace:5,uploadTimeout:1200,downloadTimeout:1200,fileCheckInterval:5,downloadCheckInterval:3,stateCheckInterval:60,inFlightDelay:600,waitTimeSeconds:20,waitTokenError:30,transferPoolSize:3,downloadMode:"data+telemetry",filetype:[".fastq",".fq",".fastq.gz",".fq.gz"],signing:x};class F{constructor(e){this.options=i({agent_version:E.version,local:P,url:I,user_agent:T,signing:x},e),this.log=this.options.log}async list(e){try{const s=await E.get(e,this.options),i=e.match(/^[a-z_]+/i)[0];return Promise.resolve(s[`${i}s`])}catch(t){return this.log.error(`list error ${String(t)}`),Promise.reject(t)}}async read(e,t){try{const i=await E.get(`${e}/${t}`,this.options);return Promise.resolve(i)}catch(s){return this.log.error("read",s),Promise.reject(s)}}async user(e){let t;if(this.options.local)t={accounts:[{id_user_account:"none",number:"NONE",name:"None"}]};else try{t=await E.get("user",this.options)}catch(s){return e?e(s):Promise.reject(s)}return e?e(null,t):Promise.resolve(t)}async status(){try{const t=await E.get("status",this.options);return Promise.resolve(t)}catch(e){return Promise.reject(e)}}async instanceToken(t,s){try{const o=await E.post("token",e(s,{id_workflow_instance:t}),i({},this.options,{legacy_form:!0}));return Promise.resolve(o)}catch(r){return Promise.reject(r)}}async installToken(e,t){try{const r=await E.post("token/install",{id_workflow:e},i({},this.options,{legacy_form:!0}));return t?t(null,r):Promise.resolve(r)}catch(s){return t?t(s):Promise.reject(s)}}async attributes(e){try{const s=await this.list("attribute");return e?e(null,s):Promise.resolve(s)}catch(t){return e?e(t):Promise.reject(t)}}async workflows(e){try{const s=await this.list("workflow");return e?e(null,s):Promise.resolve(s)}catch(t){return e?e(t):Promise.reject(t)}}async amiImages(e){if(this.options.local){const t=new Error("amiImages unsupported in local mode");return e?e(t):Promise.reject(t)}try{const s=this.list("ami_image");return e?e(null,s):Promise.resolve(s)}catch(t){return e?e(t):Promise.reject(t)}}async amiImage(e,t,s){let i,r,o,n;if(e&&t&&s instanceof Function?(i=e,r=t,o=s,n="update"):e&&t instanceof Object&&!(t instanceof Function)?(i=e,r=t,n="update"):e instanceof Object&&t instanceof Function?(r=e,o=t,n="create"):e instanceof Object&&!t?(r=e,n="create"):(n="read",i=e,o=t instanceof Function?t:null),this.options.local){const e=new Error("ami_image unsupported in local mode");return o?o(e):Promise.reject(e)}if("update"===n)try{const e=await E.put("ami_image",i,r,this.options);return o?o(null,e):Promise.resolve(e)}catch(a){return o?o(a):Promise.reject(a)}if("create"===n)try{const e=await E.post("ami_image",r,this.options);return o?o(null,e):Promise.resolve(e)}catch(a){return o?o(a):Promise.reject(a)}if(!i){const e=new Error("no id_ami_image specified");return o?o(e):Promise.reject(e)}try{const e=await this.read("ami_image",i);return o?o(null,e):Promise.resolve(e)}catch(a){return o?o(a):Promise.reject(a)}}async workflow(t,s,i){let o,n,a,l;if(t&&s&&i instanceof Function?(o=t,n=s,a=i,l="update"):t&&s instanceof Object&&!(s instanceof Function)?(o=t,n=s,l="update"):t instanceof Object&&s instanceof Function?(n=t,a=s,l="create"):t instanceof Object&&!s?(n=t,l="create"):(l="read",o=t,a=s instanceof Function?s:null),"update"===l)try{const e=await E.put("workflow",o,n,this.options);return a?a(null,e):Promise.resolve(e)}catch(d){return a?a(d):Promise.reject(d)}if("create"===l)try{const e=await E.post("workflow",n,this.options);return a?a(null,e):Promise.resolve(e)}catch(d){return a?a(d):Promise.reject(d)}if(!o){const e=new Error("no workflow id specified");return a?a(e):Promise.reject(e)}const c={};try{const t=await this.read("workflow",o);if(t.error)throw new Error(t.error);e(c,t)}catch(d){return this.log.error(`${o}: error fetching workflow ${String(d)}`),a?a(d):Promise.reject(d)}e(c,{params:{}});try{const t=await E.get(`workflow/config/${o}`,this.options);if(t.error)throw new Error(t.error);e(c,t)}catch(d){return this.log.error(`${o}: error fetching workflow config ${String(d)}`),a?a(d):Promise.reject(d)}const u=r(c.params,{widget:"ajax_dropdown"}),h=[...u.map((e,t)=>{const s=u[t];return new Promise(async(e,t)=>{const i=s.values.source.replace("{{EPI2ME_HOST}}","").replace(/&?apikey=\{\{EPI2ME_API_KEY\}\}/,"");try{const r=(await E.get(i,this.options))[s.values.data_root];return r&&(s.values=r.map(e=>({label:e[s.values.items.label_key],value:e[s.values.items.value_key]}))),e()}catch(d){return this.log.error(`failed to fetch ${i}`),t(d)}})})];try{return await Promise.all(h),a?a(null,c):Promise.resolve(c)}catch(d){return this.log.error(`${o}: error fetching config and parameters ${String(d)}`),a?a(d):Promise.reject(d)}}async startWorkflow(e,t){return E.post("workflow_instance",e,i({},this.options,{legacy_form:!0}),t)}stopWorkflow(e,t){return E.put("workflow_instance/stop",e,null,i({},this.options,{legacy_form:!0}),t)}async workflowInstances(e,t){let s,i;if(!e||e instanceof Function||void 0!==t?(s=e,i=t):i=e,i&&i.run_id)try{const e=(await E.get(`workflow_instance/wi?show=all&columns[0][name]=run_id;columns[0][searchable]=true;columns[0][search][regex]=true;columns[0][search][value]=${i.run_id};`,this.options)).data.map(e=>({id_workflow_instance:e.id_ins,id_workflow:e.id_flo,run_id:e.run_id,description:e.desc,rev:e.rev}));return s?s(null,e):Promise.resolve(e)}catch(r){return s?s(r):Promise.reject(r)}try{const e=await this.list("workflow_instance");return s?s(null,e):Promise.resolve(e)}catch(r){return s?s(r):Promise.reject(r)}}async workflowInstance(e,t){try{const i=await this.read("workflow_instance",e);return t?t(null,i):Promise.resolve(i)}catch(s){return t?t(s):Promise.reject(s)}}workflowConfig(e,t){return E.get(`workflow/config/${e}`,this.options,t)}async register(e,t,s){let r,o;t&&t instanceof Function?o=t:(r=t,o=s);try{const t=await E.put("reg",e,{description:r||`${h.userInfo().username}@${h.hostname()}`},i({},this.options,{signing:!1}));return o?o(null,t):Promise.resolve(t)}catch(n){return o?o(n):Promise.reject(n)}}async datasets(e,t){let s,i;!e||e instanceof Function||void 0!==t?(s=e,i=t):i=e,i||(i={}),i.show||(i.show="mine");try{const e=await this.list(`dataset?show=${i.show}`);return s?s(null,e):Promise.resolve(e)}catch(r){return s?s(r):Promise.reject(r)}}async dataset(e,t){if(!this.options.local)try{const i=await this.read("dataset",e);return t?t(null,i):Promise.resolve(i)}catch(s){return t?t(s):Promise.reject(s)}try{const i=(await this.datasets()).find(t=>t.id_dataset===e);return t?t(null,i):Promise.resolve(i)}catch(s){return t?t(s):Promise.reject(s)}}async fetchContent(e,t){const s=i({},this.options,{skip_url_mangle:!0,headers:{"Content-Type":""}});try{const i=await E.get(e,s);return t?t(null,i):Promise.resolve(i)}catch(r){return t?t(r):Promise.reject(r)}}}class N extends F{async workflows(e){if(!this.options.local)return super.workflows(e);const t=g.join(this.options.url,"workflows");let s;try{return s=(await c.readdir(t)).filter(e=>c.statSync(g.join(t,e)).isDirectory()).map(e=>g.join(t,e,"workflow.json")).map(e=>c.readJsonSync(e)),e?e(null,s):Promise.resolve(s)}catch(i){return this.log.warn(i),e?e(void 0):Promise.reject(void 0)}}async workflow(e,t,s){if(!this.options.local||!e||"object"===typeof e||s)return super.workflow(e,t,s);const i=g.join(this.options.url,"workflows"),r=g.join(i,e,"workflow.json");try{const e=await c.readJson(r);return s?s(null,e):Promise.resolve(e)}catch(o){return s?s(o):Promise.reject(o)}}async workflowInstances(e,t){if(!this.options.local)return super.workflowInstances(e,t);let s,i;if(!e||e instanceof Function||void 0!==t?(s=e,i=t):i=e,i){const e=new Error("querying of local instances unsupported in local mode");return s?s(e):Promise.reject(e)}const r=g.join(this.options.url,"instances");try{let e=await c.readdir(r);return e=(e=e.filter(e=>c.statSync(g.join(r,e)).isDirectory())).map(e=>{const t=g.join(r,e,"workflow.json");let s;try{s=c.readJsonSync(t)}catch(i){s={id_workflow:"-",description:"-",rev:"0.0"}}return s.id_workflow_instance=e,s.filename=t,s}),s?s(null,e):Promise.resolve(e)}catch(o){return s?s(o):Promise.reject(o)}}async datasets(e,t){if(!this.options.local)return super.datasets(e,t);let s,i;if(!e||e instanceof Function||void 0!==t?(s=e,i=t):i=e,i||(i={}),i.show||(i.show="mine"),"mine"!==i.show)return s(new Error("querying of local datasets unsupported in local mode"));const r=g.join(this.options.url,"datasets");try{let e=await c.readdir(r);e=e.filter(e=>c.statSync(g.join(r,e)).isDirectory());let t=0;return e=e.sort().map(e=>({is_reference_dataset:!0,summary:null,dataset_status:{status_label:"Active",status_value:"active"},size:0,prefix:e,id_workflow_instance:null,id_account:null,is_consented_human:null,data_fields:null,component_id:null,uuid:e,is_shared:!1,id_dataset:t+=1,id_user:null,last_modified:null,created:null,name:e,source:e,attributes:null})),s?s(null,e):Promise.resolve(e)}catch(o){return this.log.warn(o),s?s(null,[]):Promise.resolve([])}}async bundleWorkflow(e,t,s){return E.pipe(`workflow/bundle/${e}.tar.gz`,t,this.options,s)}}const M={fastq:function(e){return new Promise(async(t,s)=>{let i,r=1,o={size:0};try{o=await c.stat(e)}catch(n){s(n)}c.createReadStream(e).on("data",e=>{i=-1,r-=1;do{i=e.indexOf(10,i+1),r+=1}while(-1!==i)}).on("end",()=>t({type:"fastq",bytes:o.size,reads:Math.floor(r/4)})).on("error",s)})},fasta:function(e){return new Promise(async(t,s)=>{let i,r=1,o={size:0};try{o=await c.stat(e)}catch(n){s(n)}c.createReadStream(e).on("data",e=>{i=-1,r-=1;do{i=e.indexOf(62,i+1),r+=1}while(-1!==i)}).on("end",()=>t({type:"fasta",bytes:o.size,sequences:Math.floor((1+r)/2)})).on("error",s)})},default:async function(e){return c.stat(e).then(e=>({type:"bytes",bytes:e.size}))}};function C(e){if("string"!==typeof e&&!(e instanceof String))return Promise.resolve({});let t=g.extname(e).toLowerCase().replace(/^[.]/,"");return"fq"===t?t="fastq":"fa"===t&&(t="fasta"),M[t]||(t="default"),M[t](e)}class R{constructor(t){let s;if((s="string"===typeof t||"object"===typeof t&&t.constructor===String?JSON.parse(t):t||{}).log){if(!o([s.log.info,s.log.warn,s.log.error,s.log.debug,s.log.json],n))throw new Error("expected log object to have error, debug, info, warn and json methods");this.log=s.log}else this.log={info:e=>{console.info(`[${(new Date).toISOString()}] INFO: ${e}`)},debug:e=>{console.debug(`[${(new Date).toISOString()}] DEBUG: ${e}`)},warn:e=>{console.warn(`[${(new Date).toISOString()}] WARN: ${e}`)},error:e=>{console.error(`[${(new Date).toISOString()}] ERROR: ${e}`)},json:e=>{console.log(JSON.stringify(e))}};this.stopped=!0,this.states={upload:{filesCount:0,success:{files:0,bytes:0,reads:0},types:{},niceTypes:"",progress:{bytes:0,total:0}},download:{progress:{},success:{files:0,reads:0,bytes:0},fail:0,types:{},niceTypes:""},warnings:[]},this.config={options:a(s,O),instance:{id_workflow_instance:s.id_workflow_instance,inputQueueName:null,outputQueueName:null,outputQueueURL:null,discoverQueueCache:{},bucket:null,bucketFolder:null,remote_addr:null,chain:null,key_id:null}},this.config.instance.awssettings={region:this.config.options.region},this.REST=new F(e({},{log:this.log},this.config.options)),this.timers={downloadCheckInterval:null,stateCheckInterval:null,fileCheckInterval:null,transferTimeouts:{},visibilityIntervals:{},summaryTelemetryInterval:null}}async stopEverything(){this.stopped=!0,this.log.debug("stopping watchers"),["downloadCheckInterval","stateCheckInterval","fileCheckInterval","summaryTelemetryInterval"].forEach(e=>{this.timers[e]&&(this.log.debug(`clearing ${e} interval`),clearInterval(this.timers[e]),this.timers[e]=null)}),Object.keys(this.timers.transferTimeouts).forEach(e=>{this.log.debug(`clearing transferTimeout for ${e}`),clearTimeout(this.timers.transferTimeouts[e]),delete this.timers.transferTimeouts[e]}),Object.keys(this.timers.visibilityIntervals).forEach(e=>{this.log.debug(`clearing visibilityInterval for ${e}`),clearInterval(this.timers.visibilityIntervals[e]),delete this.timers.visibilityIntervals[e]}),this.downloadWorkerPool&&(this.log.debug("clearing downloadWorkerPool"),await f.all(Object.values(this.downloadWorkerPool)),this.downloadWorkerPool=null);const{id_workflow_instance:e}=this.config.instance;if(e){try{await this.REST.stopWorkflow(e)}catch(t){return this.log.error(`Error stopping instance: ${String(t)}`),f.reject(t)}this.log.info(`workflow instance ${e} stopped`)}return f.resolve()}async session(e,t){let s=!1;if(e&&e.length&&(s=!0),!s){if(this.sessioning)return f.resolve();if(this.states.sts_expiration&&this.states.sts_expiration>Date.now())return f.resolve();this.sessioning=!0}let i=null;try{await this.fetchInstanceToken(e,t)}catch(r){i=r,this.log.error(`session error ${String(i)}`)}finally{s||(this.sessioning=!1)}return i?f.reject(i):f.resolve()}async fetchInstanceToken(e,t){if(!this.config.instance.id_workflow_instance)return f.reject(new Error("must specify id_workflow_instance"));this.log.debug("new instance token needed");try{const i=await this.REST.instanceToken(this.config.instance.id_workflow_instance,t);this.log.debug(`allocated new instance token expiring at ${i.expiration}`),this.states.sts_expiration=new Date(i.expiration).getTime()-60*this.config.options.sessionGrace,this.config.options.proxy&&S.config.update({httpOptions:{agent:b(this.config.options.proxy,!0)}}),S.config.update(this.config.instance.awssettings),S.config.update(i),e&&e.forEach(e=>{try{e.config.update(i)}catch(t){this.log.warn(`failed to update config on ${String(e)}: ${String(t)}`)}})}catch(s){this.log.warn(`failed to fetch instance token: ${String(s)}`)}return f.resolve()}async sessionedS3(e){return await this.session(null,e),new S.S3({useAccelerateEndpoint:"on"===this.config.options.awsAcceleration})}async sessionedSQS(e){return await this.session(null,e),new S.SQS}reportProgress(){const{upload:e,download:t}=this.states;this.log.json({progress:{download:t,upload:e}})}storeState(e,t,s,i){const r=i||{};this.states[e]||(this.states[e]={}),this.states[e][t]||(this.states[e][t]={}),"incr"===s?Object.keys(r).forEach(s=>{this.states[e][t][s]=this.states[e][t][s]?this.states[e][t][s]+parseInt(r[s],10):parseInt(r[s],10)}):Object.keys(r).forEach(s=>{this.states[e][t][s]=this.states[e][t][s]?this.states[e][t][s]-parseInt(r[s],10):-parseInt(r[s],10)});try{this.states[e].success.niceReads=E.niceSize(this.states[e].success.reads)}catch(n){this.states[e].success.niceReads=0}try{this.states[e].progress.niceSize=E.niceSize(this.states[e].success.bytes+this.states[e].progress.bytes||0)}catch(n){this.states[e].progress.niceSize=0}try{this.states[e].success.niceSize=E.niceSize(this.states[e].success.bytes)}catch(n){this.states[e].success.niceSize=0}this.states[e].niceTypes=Object.keys(this.states[e].types||{}).sort().map(t=>`${this.states[e].types[t]} ${t}`).join(", ");const o=Date.now();(!this.stateReportTime||o-this.stateReportTime>2e3)&&(this.stateReportTime=o,this.reportProgress())}uploadState(e,t,s){return this.storeState("upload",e,t,s)}downloadState(e,t,s){return this.storeState("download",e,t,s)}async deleteMessage(e){try{const s=await this.discoverQueue(this.config.instance.outputQueueName);return(await this.sessionedSQS()).deleteMessage({QueueUrl:s,ReceiptHandle:e.ReceiptHandle}).promise()}catch(t){return this.log.error(`deleteMessage exception: ${String(t)}`),this.states.download.failure||(this.states.download.failure={}),this.states.download.failure[t]=this.states.download.failure[t]?this.states.download.failure[t]+1:1,f.reject(t)}}async discoverQueue(e){if(this.config.instance.discoverQueueCache[e])return f.resolve(this.config.instance.discoverQueueCache[e]);let t;this.log.debug(`discovering queue for ${e}`);try{const i=await this.sessionedSQS();t=await i.getQueueUrl({QueueName:e}).promise()}catch(s){return this.log.error(`Error: failed to find queue for ${e}: ${String(s)}`),f.reject(s)}return this.log.debug(`found queue ${t.QueueUrl}`),this.config.instance.discoverQueueCache[e]=t.QueueUrl,f.resolve(t.QueueUrl)}async queueLength(e){if(!e)return f.reject(new Error("no queueURL specified"));const t=e.match(/([\w\-_]+)$/)[0];this.log.debug(`querying queue length of ${t}`);try{const t=await this.sessionedSQS(),i=await t.getQueueAttributes({QueueUrl:e,AttributeNames:["ApproximateNumberOfMessages"]}).promise();if(i&&i.Attributes&&"ApproximateNumberOfMessages"in i.Attributes){let e=i.Attributes.ApproximateNumberOfMessages;return e=parseInt(e,10)||0,f.resolve(e)}return f.reject(new Error("unexpected response"))}catch(s){return this.log.error(`error in getQueueAttributes ${String(s)}`),f.reject(s)}}url(){return this.config.options.url}apikey(){return this.config.options.apikey}attr(e,t){if(!(e in this.config.options))throw new Error(`config object does not contain property ${e}`);return t?(this.config.options[e]=t,this):this.config.options[e]}stats(e){return this.states[e]}}R.version=E.version,R.REST=F,R.utils=E;class A{constructor(t,s,i){const r=e({},s);this.options=r,this.log=i;const{idWorkflowInstance:o}=r;i.debug(`setting up ${t}/db.sqlite for ${o}`),this.db=u(t).then(()=>(this.log.debug(`opening ${t}/db.sqlite`),v.open(g.join(t,"db.sqlite"),{Promise:Promise}).then(async e=>{this.log.debug(`opened ${t}/db.sqlite`);try{return await Promise.all([e.run("CREATE TABLE IF NOT EXISTS meta (version CHAR(12) DEFAULT '' NOT NULL, idWorkflowInstance INTEGER UNSIGNED, inputFolder CHAR(255) default '')").then(()=>{e.run("INSERT INTO meta (version, idWorkflowInstance, inputFolder) VALUES(?, ?, ?)",$.version,o,r.inputFolder)}),e.run("CREATE TABLE IF NOT EXISTS uploads (filename CHAR(255) DEFAULT '' NOT NULL PRIMARY KEY)"),e.run("CREATE TABLE IF NOT EXISTS skips (filename CHAR(255) DEFAULT '' NOT NULL PRIMARY KEY)")]),Promise.resolve(e)}catch(s){return this.log.error(s),Promise.reject(s)}}))).catch(e=>{throw this.log.error(e),e})}async uploadFile(e){const t=await this.db,s=e.replace(new RegExp(`^${this.options.inputFolder}`),"");return t.run("INSERT INTO uploads VALUES(?)",s)}async skipFile(e){const t=await this.db,s=e.replace(new RegExp(`^${this.options.inputFolder}`),"");return t.run("INSERT INTO skips VALUES(?)",s)}async seenUpload(e){const t=await this.db,i=e.replace(new RegExp(`^${this.options.inputFolder}`),"");return Promise.all([t.get("SELECT * FROM uploads u WHERE u.filename=? LIMIT 1",i),t.get("SELECT * FROM skips s WHERE s.filename=? LIMIT 1",i)]).then(e=>s(e,void 0).length)}}class Q{constructor(t,s){this.prefsFile=t||Q.profilePath(),this.profileCache={},this.defaultEndpoint=process.env.METRICHOR||O.endpoint||O.url,this.raiseExceptions=s;try{const t=c.readJSONSync(this.prefsFile);this.profileCache=e(t.profiles,{}),t.endpoint&&(this.defaultEndpoint=t.endpoint)}catch(i){if(this.raiseExceptions)throw i}}static profilePath(){return g.join(d(),".epi2me.json")}profile(t,s){if(t&&s){const r=e(this.profileCache,{[t]:s});try{c.writeJSONSync(this.prefsFile,{profiles:r})}catch(i){if(this.raiseExceptions)throw i}this.profileCache=r}return t?e({endpoint:this.defaultEndpoint},this.profileCache[t]):{}}profiles(){return Object.keys(this.profileCache||{})}}const q=()=>{const e=process.env.APPDATA||("darwin"===process.platform?g.join(d(),"Library/Application Support"):d());return process.env.EPI2ME_HOME||g.join(e,"linux"===process.platform?".epi2me":"EPI2ME")};class z extends R{constructor(t){super(t),this.REST=new N(e({},{log:this.log},this.config.options))}async autoStart(e,t){let s;this.stopped=!1;try{s=await this.REST.startWorkflow(e)}catch(i){const e=`Failed to start workflow: ${String(i)}`;return this.log.warn(e),t?t(e):f.reject(i)}return this.config.workflow=JSON.parse(JSON.stringify(e)),this.log.info("instance",JSON.stringify(s)),this.log.info("workflow config",JSON.stringify(this.config.workflow)),this.autoConfigure(s,t)}async autoJoin(e,t){let s;this.stopped=!1,this.config.instance.id_workflow_instance=e;try{s=await this.REST.workflowInstance(e)}catch(i){const e=`Failed to join workflow instance: ${String(i)}`;return this.log.warn(e),t?t(e):f.reject(i)}return"stopped"===s.state?(this.log.warn(`workflow ${e} is already stopped`),t?t("could not join workflow"):f.reject(new Error("could not join workflow"))):(this.config.workflow=this.config.workflow||{},this.log.debug("instance",JSON.stringify(s)),this.log.debug("workflow config",JSON.stringify(this.config.workflow)),this.autoConfigure(s,t))}async autoConfigure(e,t){if(["id_workflow_instance","id_workflow","remote_addr","key_id","bucket","user_defined","start_date"].forEach(t=>{this.config.instance[t]=e[t]}),this.config.instance.inputQueueName=e.inputqueue,this.config.instance.outputQueueName=e.outputqueue,this.config.instance.awssettings.region=e.region||this.config.options.region,this.config.instance.bucketFolder=`${e.outputqueue}/${e.id_user}/${e.id_workflow_instance}`,this.config.instance.summaryTelemetry=e.telemetry,e.chain)if("object"===typeof e.chain)this.config.instance.chain=e.chain;else try{this.config.instance.chain=JSON.parse(e.chain)}catch(a){throw new Error(`exception parsing chain JSON ${String(a)}`)}if(!this.config.options.inputFolder)throw new Error("must set inputFolder");if(!this.config.options.outputFolder)throw new Error("must set outputFolder");if(!this.config.instance.bucketFolder)throw new Error("bucketFolder must be set");if(!this.config.instance.inputQueueName)throw new Error("inputQueueName must be set");if(!this.config.instance.outputQueueName)throw new Error("outputQueueName must be set");c.mkdirpSync(this.config.options.outputFolder);const s=g.join(q(),"instances"),i=g.join(s,this.config.instance.id_workflow_instance);this.db=new A(i,{idWorkflowInstance:this.config.instance.id_workflow_instance,inputFolder:this.config.options.inputFolder},this.log);const r=this.config.instance.id_workflow_instance?`telemetry-${this.config.instance.id_workflow_instance}.log`:"telemetry.log",o=g.join(this.config.options.outputFolder,"epi2me-logs"),n=g.join(o,r);return c.mkdirp(o,e=>{if(e&&!String(e).match(/EEXIST/))this.log.error(`error opening telemetry log stream: mkdirpException:${String(e)}`);else try{this.telemetryLogStream=c.createWriteStream(n,{flags:"a"}),this.log.info(`logging telemetry to ${n}`)}catch(t){this.log.error(`error opening telemetry log stream: ${String(t)}`)}}),t&&t(null,this.config.instance),this.timers.summaryTelemetryInterval=setInterval(()=>{this.fetchTelemetry()},1e4*this.config.options.downloadCheckInterval),this.timers.downloadCheckInterval=setInterval(()=>{this.checkForDownloads()},1e3*this.config.options.downloadCheckInterval),this.timers.stateCheckInterval=setInterval(async()=>{try{const s=await this.REST.workflowInstance(this.config.instance.id_workflow_instance);if("stopped"===s.state){this.log.warn(`instance was stopped remotely at ${s.stop_date}. shutting down the workflow.`);try{const t=await this.stopEverything();"function"===typeof t.config.options.remoteShutdownCb&&t.config.options.remoteShutdownCb(`instance was stopped remotely at ${s.stop_date}`)}catch(e){this.log.error(`Error whilst stopping: ${String(e)}`)}}}catch(t){this.log.warn(`failed to check instance state: ${t&&t.error?t.error:t}`)}},1e3*this.config.options.stateCheckInterval),await this.session(),this.reportProgress(),this.loadUploadFiles(),this.timers.fileCheckInterval=setInterval(this.loadUploadFiles.bind(this),1e3*this.config.options.fileCheckInterval),f.resolve(e)}async checkForDownloads(){if(this.checkForDownloadsRunning)return f.resolve();this.checkForDownloadsRunning=!0,this.log.debug("checkForDownloads checking for downloads");try{const t=await this.discoverQueue(this.config.instance.outputQueueName),s=await this.queueLength(t);s?(this.log.debug(`downloads available: ${s}`),await this.downloadAvailable()):this.log.debug("no downloads available")}catch(e){this.log.warn(`checkForDownloads error ${String(e)}`),this.states.download.failure||(this.states.download.failure={}),this.states.download.failure[e]=this.states.download.failure[e]?this.states.download.failure[e]+1:1}return this.checkForDownloadsRunning=!1,f.resolve()}async downloadAvailable(){const e=Object.keys(this.downloadWorkerPool||{}).length;if(e>=this.config.options.transferPoolSize)return this.log.debug(`${e} downloads already queued`),f.resolve();let t;try{const i=await this.discoverQueue(this.config.instance.outputQueueName);this.log.debug("fetching messages");const r=await this.sessionedSQS();t=await r.receiveMessage({AttributeNames:["All"],QueueUrl:i,VisibilityTimeout:this.config.options.inFlightDelay,MaxNumberOfMessages:this.config.options.transferPoolSize-e,WaitTimeSeconds:this.config.options.waitTimeSeconds}).promise()}catch(s){return this.log.error(`receiveMessage exception: ${String(s)}`),this.states.download.failure[s]=this.states.download.failure[s]?this.states.download.failure[s]+1:1,f.reject(s)}return this.receiveMessages(t)}async loadUploadFiles(){if(this.dirScanInProgress)return f.resolve();this.dirScanInProgress=!0,this.log.debug("upload: started directory scan");try{const t=e=>this.db.seenUpload(e),s=await E.loadInputFiles(this.config.options,this.log,t);let i=0;const r=()=>new f(async e=>{if(this.stopped)return s.length=0,this.log.debug("upload: skipping, stopped"),void e();if(i>this.config.options.transferPoolSize)return void setTimeout(e,1e3);const t=s.splice(0,this.config.options.transferPoolSize-i);i+=t.length;try{await this.enqueueUploadFiles(t)}catch(r){this.log.error(`upload: exception in enqueueUploadFiles: ${String(r)}`)}i-=t.length,e()});for(;s.length;)await r()}catch(e){this.log.error(`upload: exception in loadInputFiles: ${String(e)}`)}return this.dirScanInProgress=!1,this.log.debug("upload: finished directory scan"),f.resolve()}async enqueueUploadFiles(e){let t,s=0,i=0,r={};if(!l(e)||!e.length)return f.resolve();if("workflow"in this.config)if("workflow_attributes"in this.config.workflow)r=this.config.workflow.workflow_attributes;else if("attributes"in this.config.workflow){let{attributes:e}=this.config.workflow.attributes;if(e||(e={}),"epi2me:max_size"in e&&(r.max_size=parseInt(e["epi2me:max_size"],10)),"epi2me:max_files"in e&&(r.max_files=parseInt(e["epi2me:max_files"],10)),"epi2me:category"in e){e["epi2me:category"].includes("storage")&&(r.requires_storage=!0)}}if("requires_storage"in r&&r.requires_storage&&!("storage_account"in this.config.workflow))return t="ERROR: Workflow requires storage enabled. Please provide a valid storage account [ --storage ].",this.log.error(t),this.states.warnings.push(t),f.resolve();if("max_size"in r&&(i=parseInt(r.max_size,10)),"max_files"in r&&(s=parseInt(r.max_files,10),e.length>s))return t=`ERROR: ${e.length} files found. Workflow can only accept ${s}. Please move the extra files away.`,this.log.error(t),this.states.warnings.push(t),f.resolve();this.log.info(`upload: enqueueUploadFiles: ${e.length} new files`),this.states.upload.filesCount+=e.length;const o=e.map(async e=>{const r=e;if(s&&this.states.upload.filesCount>s)t=`Maximum ${s} file(s) already uploaded. Marking ${r.name} as skipped`,this.log.error(t),this.states.warnings.push(t),this.states.upload.filesCount-=1,r.skip="SKIP_TOO_MANY";else if(i&&r.size>i)t=`${r.name} is over ${i.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}. Marking as skipped`,r.skip="SKIP_TOO_BIG",this.states.upload.filesCount-=1,this.log.error(t),this.states.warnings.push(t);else try{r.stats=await C(r.path)}catch(o){this.error(`failed to stat ${r.path}: ${String(o)}`)}return this.uploadJob(r)});try{return await f.all(o),this.log.info(`upload: inputBatchQueue (${o.length} jobs) complete`),this.loadUploadFiles()}catch(n){return this.log.error(`upload: enqueueUploadFiles exception ${String(n)}`),f.reject(n)}}async uploadJob(t){if("skip"in t)return this.db.skipFile(t.path);let s,i;try{this.log.info(`upload: ${t.id} starting`),s=await this.uploadHandler(t),this.log.info(`upload: ${s.id} uploaded and notified`)}catch(r){i=r,this.log.error(`upload: ${t.id} done, but failed: ${String(i)}`)}if(s||(s={}),i)this.log.error(`uploadJob ${i}`),this.states.upload.failure||(this.states.upload.failure={}),this.states.upload.failure[i]=this.states.upload.failure[i]?this.states.upload.failure[i]+1:1;else if(this.uploadState("success","incr",e({files:1},s.stats)),s.name){const e=g.extname(s.name);this.uploadState("types","incr",{[e]:1})}return f.resolve()}async receiveMessages(e){return e&&e.Messages&&e.Messages.length?(this.downloadWorkerPool||(this.downloadWorkerPool={}),e.Messages.forEach(e=>{this.downloadWorkerPool[e.MessageId]=1;const t=setTimeout(()=>{throw this.log.error(`this.downloadWorkerPool timeoutHandle. Clearing queue slot for message: ${e.MessageId}`),new Error("download timed out")},1e3*(60+this.config.options.downloadTimeout));this.processMessage(e).catch(e=>{this.log.error(`processMessage ${String(e)}`)}).finally(()=>{clearTimeout(t),delete this.downloadWorkerPool[e.MessageId]})}),this.log.info(`downloader queued ${e.Messages.length} messages for processing`),f.resolve()):(this.log.info("complete (empty)"),f.resolve())}async processMessage(e){let t,s;if(!e)return this.log.debug("download.processMessage: empty message"),f.resolve();"Attributes"in e&&"ApproximateReceiveCount"in e.Attributes&&this.log.debug(`download.processMessage: ${e.MessageId} / ${e.Attributes.ApproximateReceiveCount}`);try{t=JSON.parse(e.Body)}catch(n){this.log.error(`error parsing JSON message.Body from message: ${JSON.stringify(e)} ${String(n)}`);try{await this.deleteMessage(e)}catch(a){this.log.error(`Exception deleting message: ${String(a)}`)}return f.resolve()}if(t.telemetry){const{telemetry:s}=t;if(s.tm_path)try{this.log.debug(`download.processMessage: ${e.MessageId} fetching telemetry`);const i=await this.sessionedS3(),r=await i.getObject({Bucket:t.bucket,Key:s.tm_path}).promise();this.log.info(`download.processMessage: ${e.MessageId} fetched telemetry`),s.batch=r.Body.toString("utf-8").split("\n").filter(e=>e&&e.length>0).map(e=>{try{return JSON.parse(e)}catch(a){return this.log.error(`Telemetry Batch JSON Parse error: ${String(a)}`),e}})}catch(l){this.log.error(`Could not fetch telemetry JSON: ${String(l)}`)}try{this.telemetryLogStream.write(JSON.stringify(s)+p)}catch(u){this.log.error(`error writing telemetry: ${u}`)}this.config.options.telemetryCb&&this.config.options.telemetryCb(s)}if(!t.path)return this.log.warn("nothing to download"),f.resolve();const i=t.path.match(/[\w\W]*\/([\w\W]*?)$/),r=i?i[1]:"";if(s=this.config.options.outputFolder,t.telemetry&&t.telemetry.hints&&t.telemetry.hints.folder){this.log.debug(`using folder hint ${t.telemetry.hints.folder}`);const e=t.telemetry.hints.folder.split("/").map(e=>e.toUpperCase());s=g.join.apply(null,[s,...e])}c.mkdirpSync(s);const o=g.join(s,r);if("data+telemetry"===this.config.options.downloadMode){const s=[""];let i=this.config&&this.config.workflow&&this.config.workflow.settings&&this.config.workflow.settings.output_format?this.config.workflow.settings.output_format:[];("string"===typeof i||i instanceof String)&&(i=i.trim().split(/[\s,]+/));try{s.push(...i)}catch(a){this.log.error(`Failed to work out workflow file suffixes: ${String(a)}`)}try{const i=s.map(s=>{const i=t.path+s,r=o+s;return this.log.debug(`download.processMessage: ${e.MessageId} downloading ${i} to ${r}`),new f(async(o,n)=>{try{await this.initiateDownloadStream({bucket:t.bucket,path:i},e,r)}catch(a){this.log.error(`Caught exception waiting for initiateDownloadStream: ${String(a)}`),s&&n(a)}o()})});await f.all(i)}catch(a){this.log.error(`Exception fetching file batch: ${String(a)}`)}try{const e=!(!t.telemetry||!t.telemetry.json)&&t.telemetry.json.exit_status;e&&this.config.options.dataCb&&this.config.options.dataCb(o,e)}catch(l){this.log.warn(`failed to fire data callback: ${l}`)}}else{const e=t.telemetry.batch_summary&&t.telemetry.batch_summary.reads_num?t.telemetry.batch_summary.reads_num:1;this.downloadState("success","incr",{files:1,reads:e})}try{await this.deleteMessage(e)}catch(a){this.log.error(`Exception deleting message: ${String(a)}`)}return f.resolve()}async initiateDownloadStream(t,s,i){return new f(async(r,o)=>{let n,a,l;try{n=await this.sessionedS3()}catch(d){o(d)}const u=e=>{if(this.log.error(`Error during stream of bucket=${t.bucket} path=${t.path} to file=${i} ${String(e)}`),clearTimeout(this.timers.transferTimeouts[i]),delete this.timers.transferTimeouts[i],!a.networkStreamError)try{a.networkStreamError=1,a.close(),c.remove(i).then(()=>{this.log.warn(`removed failed download ${i}`)}).catch(e=>{this.log.warn(`failed to remove ${i}. unlinkException: ${String(e)}`)}),l.destroy&&(this.log.error(`destroying read stream for ${i}`),l.destroy())}catch(d){this.log.error(`error handling stream error: ${String(d)}`)}};try{const e={Bucket:t.bucket,Key:t.path};a=c.createWriteStream(i);const s=n.getObject(e);s.on("httpHeaders",(e,t)=>{this.downloadState("progress","incr",{total:parseInt(t["content-length"],10)})}),l=s.createReadStream()}catch(p){return this.log.error(`getObject/createReadStream exception: ${String(p)}`),void o(p)}l.on("error",u),a.on("finish",async()=>{if(!a.networkStreamError){this.log.debug(`downloaded ${i}`);try{const s=g.extname(i),r=await C(i);this.downloadState("success","incr",e({files:1},r)),this.downloadState("types","incr",{[s]:1}),this.downloadState("progress","decr",{total:r.bytes,bytes:r.bytes})}catch(t){this.log.warn(`failed to stat ${i}: ${String(t)}`)}this.reportProgress()}}),a.on("close",e=>{this.log.debug(`closing writeStream ${i}`),e&&this.log.error(`error closing write stream ${e}`),clearInterval(this.timers.visibilityIntervals[i]),delete this.timers.visibilityIntervals[i],clearTimeout(this.timers.transferTimeouts[i]),delete this.timers.transferTimeouts[i],setTimeout(this.checkForDownloads.bind(this)),this.log.info(`download.initiateDownloadStream: ${s.MessageId} downloaded ${t.path} to ${i}`),r()}),a.on("error",u);const h=()=>{u(new Error("transfer timed out"))};this.timers.transferTimeouts[i]=setTimeout(h,1e3*this.config.options.downloadTimeout);this.timers.visibilityIntervals[i]=setInterval(async()=>{const e=this.config.instance.outputQueueURL,t=s.ReceiptHandle;this.log.debug({message_id:s.MessageId},"updateVisibility");try{await this.sqs.changeMessageVisibility({QueueUrl:e,ReceiptHandle:t,VisibilityTimeout:this.config.options.inFlightDelay}).promise()}catch(r){this.log.error({message_id:s.MessageId,queue:e,error:r},"Error setting visibility"),clearInterval(this.timers.visibilityIntervals[i])}},900*this.config.options.inFlightDelay),l.on("data",e=>{clearTimeout(this.timers.transferTimeouts[i]),this.timers.transferTimeouts[i]=setTimeout(h,1e3*this.config.options.downloadTimeout),this.downloadState("progress","incr",{bytes:e.length})}).pipe(a)})}async uploadHandler(e){const t=await this.sessionedS3();let s;const i=e.relative.replace(/^[\\\/]+/,"").replace(/\\/g,"/").replace(/\//g,"_"),r=[this.config.instance.bucketFolder,"component-0",i,i].join("/").replace(/\/+/g,"/");let o;return new f((i,n)=>{const a=()=>{s&&!s.closed&&s.close(),n(new Error(`${e.name} timed out`))};o=setTimeout(a,1e3*(this.config.options.uploadTimeout+5));try{s=c.createReadStream(e.path)}catch(l){return clearTimeout(o),void n(l)}s.on("error",e=>{s.close();let t="error in upload readstream";e&&e.message&&(t+=`: ${e.message}`),clearTimeout(o),n(new Error(t))}),s.on("open",()=>{const l={Bucket:this.config.instance.bucket,Key:r,Body:s};this.config.instance.key_id&&(l.SSEKMSKeyId=this.config.instance.key_id,l.ServerSideEncryption="aws:kms"),e.size&&(l["Content-Length"]=e.size),this.uploadState("progress","incr",{total:e.size});let c=0;const u=t.upload(l,{partSize:10485760,queueSize:1});u.on("httpUploadProgress",async e=>{this.uploadState("progress","incr",{bytes:e.loaded-c}),c=e.loaded,clearTimeout(o),o=setTimeout(a,1e3*(this.config.options.uploadTimeout+5));try{await this.session([u.service])}catch(t){this.log.warn({error:String(t)},"Error refreshing token")}}),u.promise().then(()=>{this.log.info(`${e.id} S3 upload complete`),s.close(),clearTimeout(o),this.uploadComplete(r,e).then(()=>{i(e)}).catch(e=>{n(e)}).finally(()=>{this.uploadState("progress","decr",{total:e.size,bytes:e.size})})}).catch(t=>{this.log.warn(`${e.id} uploadStreamError ${t}`),n(t)})})})}async uploadComplete(e,t){this.log.info(`${t.id} uploaded to S3: ${e}`);const s={bucket:this.config.instance.bucket,outputQueue:this.config.instance.outputQueueName,remote_addr:this.config.instance.remote_addr,user_defined:this.config.instance.user_defined||null,apikey:this.config.options.apikey,id_workflow_instance:this.config.instance.id_workflow_instance,id_master:this.config.instance.id_workflow,utc:(new Date).toISOString(),path:e,prefix:e.substring(0,e.lastIndexOf("/"))};if(this.config.instance.chain)try{s.components=JSON.parse(JSON.stringify(this.config.instance.chain.components)),s.targetComponentId=this.config.instance.chain.targetComponentId}catch(i){return this.log.error(`${t.id} exception parsing components JSON ${String(i)}`),f.reject(i)}if(this.config.instance.key_id&&(s.key_id=this.config.instance.key_id),this.config.options.agent_address)try{s.agent_address=JSON.parse(this.config.options.agent_address)}catch(r){this.log.error(`${t.id} Could not parse agent_address ${String(r)}`)}s.components&&Object.keys(s.components).forEach(e=>{"uploadMessageQueue"===s.components[e].inputQueueName&&(s.components[e].inputQueueName=this.uploadMessageQueue),"downloadMessageQueue"===s.components[e].inputQueueName&&(s.components[e].inputQueueName=this.downloadMessageQueue)});try{const e=await this.discoverQueue(this.config.instance.inputQueueName),i=await this.sessionedSQS();this.log.info(`${t.id} sending SQS message to input queue`),await i.sendMessage({QueueUrl:e,MessageBody:JSON.stringify(s)}).promise()}catch(o){return this.log.error(`${t.id} exception sending SQS message: ${String(o)}`),f.reject(o)}return this.log.info(`${t.id} SQS message sent. Mark as uploaded`),this.db.uploadFile(t.path)}async fetchTelemetry(){if(!this.config||!this.config.instance||!this.config.instance.summaryTelemetry)return f.resolve();const e=g.join(q(),"instances"),t=g.join(e,this.config.instance.id_workflow_instance),s=[];Object.keys(this.config.instance.summaryTelemetry).forEach(e=>{const i=this.config.instance.summaryTelemetry[e]||{},r=i[Object.keys(i)[0]];if(!r)return;const o=g.join(t,`${e}.json`);s.push(this.REST.fetchContent(r).then(e=>{c.writeJSONSync(o,e),this.log.debug(`fetched telemetry summary ${o}`)}).catch(e=>{this.log.debug(`Error fetching telemetry: ${String(e)}`)}))});let i=0;try{await f.all(s)}catch(r){i+=1}return i&&this.log.warn("summary telemetry incomplete"),f.resolve()}}z.version=E.version,z.REST=N,z.utils=E,z.EPI2ME_HOME=q(),z.Profile=Q;export default z;
