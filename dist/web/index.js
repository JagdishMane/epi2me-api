/**
 * Copyright Metrichor Ltd. (An Oxford Nanopore Technologies Company) 2019
 */

"use strict";function _interopDefault(e){return e&&"object"===typeof e&&"default"in e?e.default:e}var os=_interopDefault(require("os")),lodash=require("lodash"),axios=_interopDefault(require("axios")),crypto=_interopDefault(require("crypto")),version="3.0.0";axios.defaults.validateStatus=(e=>e<=504);const deprecatedFunctionWarning=(e,t)=>{console.warn(`DEPRECATION WARNING: '${e}' will be removed from future versions of this package. Please rename the function to '${t}'`)},utils=function(){const e=(e,t)=>{e.headers||(e.headers={});let r=t;if(r||(r={}),!r.apikey)return;if(e.headers["X-EPI2ME-ApiKey"]=r.apikey,!r.apisecret)return;e.headers["X-EPI2ME-SignatureDate"]=(new Date).toISOString(),e.url.match(/^https:/)&&(e.url=e.url.replace(/:443/,"")),e.url.match(/^http:/)&&(e.url=e.url.replace(/:80/,""));const o=[e.url,Object.keys(e.headers).sort().filter(e=>e.match(/^x-epi2me/i)).map(t=>`${t}:${e.headers[t]}`).join("\n")].join("\n"),n=crypto.createHmac("sha1",r.apisecret).update(o).digest("hex");e.headers["X-EPI2ME-SignatureV0"]=n},t=async e=>{const t=e?e.data:null;if(!t)return Promise.reject(new Error("unexpected non-json response"));if(e&&e.status>=400){let r=`Network error ${e.status}`;return t.error&&(r=t.error),504===e.status&&(r="Please check your network connection and try again."),Promise.reject(new Error(r))}return t.error?Promise.reject(new Error(t.error)):Promise.resolve(t)};return{version:version,headers:(t,r)=>{let o=r;o||(o={}),t.headers=lodash.merge({Accept:"application/json","Content-Type":"application/json","X-EPI2ME-Client":o.user_agent||"api","X-EPI2ME-Version":o.agent_version||utils.version},t.headers),"signing"in o&&!o.signing||e(t,o),o.proxy&&(t.proxy=o.proxy)},get:async(e,r)=>{let o,n=r.url,s=e;r.skip_url_mangle?o=s:(s=`/${s}`,o=(n=n.replace(/\/+$/,""))+(s=s.replace(/\/+/g,"/")));const i={url:o,gzip:!0};let a;utils.headers(i,r);try{a=await axios.get(i.url,i)}catch(c){return Promise.reject(c)}return t(a,r)},post:async(e,r,o)=>{let n=o.url;const s={url:`${n=n.replace(/\/+$/,"")}/${e.replace(/\/+/g,"/")}`,gzip:!0,data:r,headers:{}};if(o.legacy_form){const e=[],t=lodash.merge({json:JSON.stringify(r)},r);Object.keys(t).sort().forEach(r=>{e.push(`${r}=${escape(t[r])}`)}),s.data=e.join("&"),s.headers["Content-Type"]="application/x-www-form-urlencoded"}utils.headers(s,o);const{data:i}=s;let a;delete s.data;try{a=await axios.post(s.url,i,s)}catch(c){return Promise.reject(c)}return t(a,o)},put:async(e,r,o,n)=>{let s=n.url;const i={url:`${s=s.replace(/\/+$/,"")}/${e.replace(/\/+/g,"/")}/${r}`,gzip:!0,data:o,headers:{}};if(n.legacy_form){const e=[],t=lodash.merge({json:JSON.stringify(o)},o);Object.keys(t).sort().forEach(r=>{e.push(`${r}=${escape(t[r])}`)}),i.data=e.join("&"),i.headers["Content-Type"]="application/x-www-form-urlencoded"}utils.headers(i,n);const{data:a}=i;let c;delete i.data;try{c=await axios.put(i.url,a,i)}catch(l){return Promise.reject(l)}return t(c,n)}}}();var local=!1,url="https://epi2me.nanoporetech.com",user_agent="EPI2ME API",signing=!0;class REST{constructor(e){this.options=lodash.assign({agent_version:utils.version,local:local,url:url,user_agent:user_agent,signing:signing},e);const{log:t}=this.options;if(t){if(!lodash.every([t.info,t.warn,t.error],lodash.isFunction))throw new Error('expected log object to have "error", "debug", "info" and "warn" methods');this.log=t}else this.log={info:e=>{console.info(`[${(new Date).toISOString()}] INFO: ${e}`)},debug:e=>{console.debug(`[${(new Date).toISOString()}] DEBUG: ${e}`)},warn:e=>{console.warn(`[${(new Date).toISOString()}] WARN: ${e}`)},error:e=>{console.error(`[${(new Date).toISOString()}] ERROR: ${e}`)}}}async list(e){try{const r=await utils.get(e,this.options),o=e.match(/^[a-z_]+/i)[0];return Promise.resolve(r[`${o}s`])}catch(t){return this.log.error(`list error ${String(t)}`),Promise.reject(t)}}async read(e,t){try{const o=await utils.get(`${e}/${t}`,this.options);return Promise.resolve(o)}catch(r){return this.log.error("read",r),Promise.reject(r)}}async user(e){let t;if(this.options.local)t={accounts:[{id_user_account:"none",number:"NONE",name:"None"}]};else try{t=await utils.get("user",this.options)}catch(r){return e?e(r):Promise.reject(r)}return e?e(null,t):Promise.resolve(t)}async instanceToken(e,t){try{const o=await utils.post("token",{id_workflow_instance:e},lodash.assign({},this.options,{legacy_form:!0}));return t?t(null,o):Promise.resolve(o)}catch(r){return t?t(r):Promise.reject(r)}}async instance_token(e,t){return deprecatedFunctionWarning("instance_token","instanceToken"),this.instanceToken(e,t)}async installToken(e,t){try{const o=await utils.post("token/install",{id_workflow:e},lodash.assign({},this.options,{legacy_form:!0}));return t?t(null,o):Promise.resolve(o)}catch(r){return t?t(r):Promise.reject(r)}}async install_token(e,t){return deprecatedFunctionWarning("install_token","installToken"),this.installToken(e,t)}async attributes(e){try{const r=await this.list("attribute");return e?e(null,r):Promise.resolve(r)}catch(t){return e?e(t):Promise.reject(t)}}async workflows(e){try{const r=await this.list("workflow");return e?e(null,r):Promise.resolve(r)}catch(t){return e?e(t):Promise.reject(t)}}async amiImages(e){if(this.options.local){const t=new Error("amiImages unsupported in local mode");return e?e(t):Promise.reject(t)}try{const r=this.list("ami_image");return e?e(null,r):Promise.resolve(r)}catch(t){return e?e(t):Promise.reject(t)}}async ami_images(e){return deprecatedFunctionWarning("ami_images","amiImages"),this.amiImages(e)}async amiImage(e,t,r){let o,n,s,i;if(e&&t&&r instanceof Function?(o=e,n=t,s=r,i="update"):e&&t instanceof Object&&!(t instanceof Function)?(o=e,n=t,i="update"):e instanceof Object&&t instanceof Function?(n=e,s=t,i="create"):e instanceof Object&&!t?(n=e,i="create"):(i="read",o=e,s=t instanceof Function?t:null),this.options.local){const e=new Error("ami_image unsupported in local mode");return s?s(e):Promise.reject(e)}if("update"===i)try{const e=await utils.put("ami_image",o,n,this.options);return s?s(null,e):Promise.resolve(e)}catch(a){return s?s(a):Promise.reject(a)}if("create"===i)try{const e=await utils.post("ami_image",n,this.options);return s?s(null,e):Promise.resolve(e)}catch(a){return s?s(a):Promise.reject(a)}if(!o){const e=new Error("no id_ami_image specified");return s?s(e):Promise.reject(e)}try{const e=await this.read("ami_image",o);return s?s(null,e):Promise.resolve(e)}catch(a){return s?s(a):Promise.reject(a)}}async ami_image(e,t,r){return deprecatedFunctionWarning("ami_image","amiImage"),this.amiImage(e,t,r)}async workflow(e,t,r){let o,n,s,i;if(e&&t&&r instanceof Function?(o=e,n=t,s=r,i="update"):e&&t instanceof Object&&!(t instanceof Function)?(o=e,n=t,i="update"):e instanceof Object&&t instanceof Function?(n=e,s=t,i="create"):e instanceof Object&&!t?(n=e,i="create"):(i="read",o=e,s=t instanceof Function?t:null),"update"===i)try{const e=await utils.put("workflow",o,n,lodash.assign({},this.options,{legacy_form:!0}));return s?s(null,e):Promise.resolve(e)}catch(u){return s?s(u):Promise.reject(u)}if("create"===i)try{const e=await utils.post("workflow",n,lodash.assign({},this.options,{legacy_form:!0}));return s?s(null,e):Promise.resolve(e)}catch(u){return s?s(u):Promise.reject(u)}if(!o){const e=new Error("no workflow id specified");return s?s(e):Promise.reject(e)}const a={};try{const e=await this.read("workflow",o);if(e.error)throw new Error(e.error);lodash.merge(a,e)}catch(u){return this.log.error(`${o}: error fetching workflow ${String(u)}`),s?s(u):Promise.reject(u)}lodash.merge(a,{params:{}});try{const e=await utils.get(`workflow/config/${o}`,this.options);if(e.error)throw new Error(e.error);lodash.merge(a,e)}catch(u){return this.log.error(`${o}: error fetching workflow config ${String(u)}`),s?s(u):Promise.reject(u)}const c=lodash.filter(a.params,{widget:"ajax_dropdown"}),l=[...c.map((e,t)=>{const r=c[t];return new Promise(async(e,t)=>{const o=r.values.source.replace("{{EPI2ME_HOST}}","");try{const n=(await utils.get(o,this.options))[r.values.data_root];return n&&(r.values=n.map(e=>({label:e[r.values.items.label_key],value:e[r.values.items.value_key]}))),e()}catch(u){return this.log.error(`failed to fetch ${o}`),t(u)}})})];try{return await Promise.all(l),s?s(null,a):Promise.resolve(a)}catch(u){return this.log.error(`${o}: error fetching config and parameters ${String(u)}`),s?s(u):Promise.reject(u)}}async startWorkflow(e,t){return utils.post("workflow_instance",e,lodash.assign({},this.options,{legacy_form:!0}),t)}async start_workflow(e,t){return deprecatedFunctionWarning("start_workflow","startWorkflow"),this.startWorkflow(e,t)}stopWorkflow(e,t){return utils.put("workflow_instance/stop",e,null,lodash.assign({},this.options,{legacy_form:!0}),t)}stop_workflow(e,t){return deprecatedFunctionWarning("stop_workflow","stopWorkflow"),this.stopWorkflow(e,t)}async workflowInstances(e,t){let r,o;if(!e||e instanceof Function||void 0!==t?(r=e,o=t):o=e,o&&o.run_id)try{const e=(await utils.get(`workflow_instance/wi?show=all&columns[0][name]=run_id;columns[0][searchable]=true;columns[0][search][regex]=true;columns[0][search][value]=${o.run_id};`,this.options)).data.map(e=>({id_workflow_instance:e.id_ins,id_workflow:e.id_flo,run_id:e.run_id,description:e.desc,rev:e.rev}));return r?r(null,e):Promise.resolve(e)}catch(n){return r?r(n):Promise.reject(n)}try{const e=await this.list("workflow_instance");return r?r(null,e):Promise.resolve(e)}catch(n){return r?r(n):Promise.reject(n)}}async workflow_instances(e,t){return deprecatedFunctionWarning("workflow_instances","workflowInstances"),this.workflowInstances(e,t)}async workflowInstance(e,t){try{const o=await this.read("workflow_instance",e);return t?t(null,o):Promise.resolve(o)}catch(r){return t?t(r):Promise.reject(r)}}async workflow_instance(e,t){return deprecatedFunctionWarning("workflow_instance","workflowInstance"),this.workflowInstance(e,t)}workflowConfig(e,t){return utils.get(`workflow/config/${e}`,this.options,t)}workflow_config(e,t){return deprecatedFunctionWarning("workflow_config","workflowConfig"),this.workflowConfig(e,t)}async register(e,t,r){let o,n;t&&t instanceof Function?n=t:(o=t,n=r);try{const t=await utils.put("reg",e,{description:o||`${os.userInfo().username}@${os.hostname()}`},lodash.assign({},this.options,{signing:!1}));return n?n(null,t):Promise.resolve(t)}catch(s){return n?n(s):Promise.reject(s)}}async datasets(e,t){let r,o;!e||e instanceof Function||void 0!==t?(r=e,o=t):o=e,o||(o={}),o.show||(o.show="mine");try{const e=await this.list(`dataset?show=${o.show}`);return r?r(null,e):Promise.resolve(e)}catch(n){return r?r(n):Promise.reject(n)}}async dataset(e,t){if(!this.options.local)try{const o=await this.read("dataset",e);return t?t(null,o):Promise.resolve(o)}catch(r){return t?t(r):Promise.reject(r)}try{const o=(await this.datasets()).find(t=>t.id_dataset===e);return t?t(null,o):Promise.resolve(o)}catch(r){return t?t(r):Promise.reject(r)}}async fetchContent(e,t){const r=lodash.assign({},this.options,{skip_url_mangle:!0});try{const n=await utils.get(e,r);return t?t(null,n):Promise.resolve(n)}catch(o){return t?t(o):Promise.reject(o)}}}module.exports=REST;
