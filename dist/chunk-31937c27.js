/**
 * Copyright Metrichor Ltd. (An Oxford Nanopore Technologies Company) 2019
 */

import{remove as e}from"lodash";import{mkdirp as o}from"fs-extra";import s from"path";import n from"sqlite";export default class{constructor(e,t){console.log(`setting up ${e}/db.sqlite for ${t}`),this.db=o(e).then(()=>(console.log(`opening ${e}/db.sqlite`),n.open(s.join(e,"db.sqlite"),{Promise:Promise}).then(async o=>{console.log(`opened ${e}/db.sqlite`);try{return await Promise.all([o.run("CREATE TABLE IF NOT EXISTS meta (version CHAR(12) DEFAULT '' NOT NULL, id_workflow_instance INTEGER UNSIGNED)").then(()=>{o.run("INSERT INTO meta (version, id_workflow_instance) VALUES('0.0.1', ?)",t)}),o.run("CREATE TABLE IF NOT EXISTS uploads (filename CHAR(255) DEFAULT '' NOT NULL PRIMARY KEY)"),o.run("CREATE TABLE IF NOT EXISTS skips (filename CHAR(255) DEFAULT '' NOT NULL PRIMARY KEY)")]),console.log(`done schema ${e}/db.sqlite`),Promise.resolve(o)}catch(s){return console.log(s),Promise.reject(s)}}))).catch(e=>{throw console.log(e),e})}async uploadFile(e){return(await this.db).run("INSERT INTO uploads VALUES(?)",e)}async skipFile(e){return(await this.db).run("INSERT INTO skips VALUES(?)",e)}async seenUpload(o){console.log(`checking seenUpload ${o}`);const s=await this.db;return Promise.all([s.get("SELECT * FROM uploads u WHERE u.filename=? LIMIT 1",o),s.get("SELECT * FROM skips s WHERE s.filename=? LIMIT 1",o)]).then(s=>(console.log(`checked seenUpload ${o}`),e(s,void 0).length))}}
