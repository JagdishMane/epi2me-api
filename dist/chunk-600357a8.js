/**
 * Copyright Metrichor Ltd. (An Oxford Nanopore Technologies Company) 2019
 */

"use strict";function _interopDefault(e){return e&&"object"===typeof e&&"default"in e?e.default:e}var lodash=require("lodash"),fs=require("fs-extra"),fs__default=_interopDefault(fs),path=_interopDefault(require("path")),sqlite=_interopDefault(require("sqlite"));class db{constructor(e,o){console.log(`setting up ${e}/db.sqlite for ${o}`),this.db=fs.mkdirp(e).then(()=>(console.log(`opening ${e}/db.sqlite`),sqlite.open(path.join(e,"db.sqlite"),{Promise:Promise}).then(async s=>{console.log(`opened ${e}/db.sqlite`);try{return await Promise.all([s.run("CREATE TABLE IF NOT EXISTS meta (version CHAR(12) DEFAULT '' NOT NULL, id_workflow_instance INTEGER UNSIGNED)").then(()=>{s.run("INSERT INTO meta (version, id_workflow_instance) VALUES('0.0.1', ?)",o)}),s.run("CREATE TABLE IF NOT EXISTS uploads (filename CHAR(255) DEFAULT '' NOT NULL PRIMARY KEY)"),s.run("CREATE TABLE IF NOT EXISTS skips (filename CHAR(255) DEFAULT '' NOT NULL PRIMARY KEY)")]),console.log(`done schema ${e}/db.sqlite`),Promise.resolve(s)}catch(t){return console.log(t),Promise.reject(t)}}))).catch(e=>{throw console.log(e),e})}async uploadFile(e){return(await this.db).run("INSERT INTO uploads VALUES(?)",e)}async skipFile(e){return(await this.db).run("INSERT INTO skips VALUES(?)",e)}async seenUpload(e){console.log(`checking seenUpload ${e}`);const o=await this.db;return Promise.all([o.get("SELECT * FROM uploads u WHERE u.filename=? LIMIT 1",e),o.get("SELECT * FROM skips s WHERE s.filename=? LIMIT 1",e)]).then(o=>(console.log(`checked seenUpload ${e}`),lodash.remove(o,void 0).length))}}exports.default=db;
