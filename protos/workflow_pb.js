// source: workflow.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.epi2me.workflow.RunningInstanceStateReply', null, global);
goog.exportSymbol('proto.epi2me.workflow.RunningInstancesReply', null, global);
goog.exportSymbol('proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails', null, global);
goog.exportSymbol('proto.epi2me.workflow.StartReply', null, global);
goog.exportSymbol('proto.epi2me.workflow.StartRequest', null, global);
goog.exportSymbol('proto.epi2me.workflow.StartRequest.InstanceAttribute', null, global);
goog.exportSymbol('proto.epi2me.workflow.StopReply', null, global);
goog.exportSymbol('proto.epi2me.workflow.WorkflowInstanceByIdRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.StartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.epi2me.workflow.StartRequest.repeatedFields_, null);
};
goog.inherits(proto.epi2me.workflow.StartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.StartRequest.displayName = 'proto.epi2me.workflow.StartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.epi2me.workflow.StartRequest.InstanceAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.StartRequest.InstanceAttribute.displayName = 'proto.epi2me.workflow.StartRequest.InstanceAttribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.StartReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.epi2me.workflow.StartReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.StartReply.displayName = 'proto.epi2me.workflow.StartReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.RunningInstancesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.epi2me.workflow.RunningInstancesReply.repeatedFields_, null);
};
goog.inherits(proto.epi2me.workflow.RunningInstancesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.RunningInstancesReply.displayName = 'proto.epi2me.workflow.RunningInstancesReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.displayName = 'proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.epi2me.workflow.WorkflowInstanceByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.WorkflowInstanceByIdRequest.displayName = 'proto.epi2me.workflow.WorkflowInstanceByIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.RunningInstanceStateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.epi2me.workflow.RunningInstanceStateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.RunningInstanceStateReply.displayName = 'proto.epi2me.workflow.RunningInstanceStateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.epi2me.workflow.StopReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.epi2me.workflow.StopReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.epi2me.workflow.StopReply.displayName = 'proto.epi2me.workflow.StopReply';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.epi2me.workflow.StartRequest.repeatedFields_ = [5,25];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.StartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.StartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.StartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apisecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputfoldersList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    outputfolder: jspb.Message.getFieldWithDefault(msg, 6, ""),
    idworkflow: jspb.Message.getFieldWithDefault(msg, 10, ""),
    computeaccountid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    storageaccountid: jspb.Message.getFieldWithDefault(msg, 20, ""),
    isconsentedhuman: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    iddataset: jspb.Message.getFieldWithDefault(msg, 22, ""),
    storeresults: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
    userdefined: (f = msg.getUserdefined()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    instanceattributesList: jspb.Message.toObjectList(msg.getInstanceattributesList(),
    proto.epi2me.workflow.StartRequest.InstanceAttribute.toObject, includeInstance),
    region: jspb.Message.getFieldWithDefault(msg, 26, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.StartRequest}
 */
proto.epi2me.workflow.StartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.StartRequest;
  return proto.epi2me.workflow.StartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.StartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.StartRequest}
 */
proto.epi2me.workflow.StartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApisecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addInputfolders(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputfolder(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdworkflow(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setComputeaccountid(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageaccountid(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsconsentedhuman(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setIddataset(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStoreresults(value);
      break;
    case 24:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setUserdefined(value);
      break;
    case 25:
      var value = new proto.epi2me.workflow.StartRequest.InstanceAttribute;
      reader.readMessage(value,proto.epi2me.workflow.StartRequest.InstanceAttribute.deserializeBinaryFromReader);
      msg.addInstanceattributes(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.StartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.StartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.StartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApisecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputfoldersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getOutputfolder();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIdworkflow();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getComputeaccountid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStorageaccountid();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getIsconsentedhuman();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getIddataset();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getStoreresults();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = message.getUserdefined();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getInstanceattributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      proto.epi2me.workflow.StartRequest.InstanceAttribute.serializeBinaryToWriter
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.StartRequest.InstanceAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.StartRequest.InstanceAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    idAttribute: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.StartRequest.InstanceAttribute}
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.StartRequest.InstanceAttribute;
  return proto.epi2me.workflow.StartRequest.InstanceAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.StartRequest.InstanceAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.StartRequest.InstanceAttribute}
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdAttribute(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.StartRequest.InstanceAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.StartRequest.InstanceAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdAttribute();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 id_attribute = 1;
 * @return {number}
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.prototype.getIdAttribute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.epi2me.workflow.StartRequest.InstanceAttribute} returns this
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.prototype.setIdAttribute = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest.InstanceAttribute} returns this
 */
proto.epi2me.workflow.StartRequest.InstanceAttribute.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string apikey = 1;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setApikey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string apisecret = 2;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getApisecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setApisecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string inputFolders = 5;
 * @return {!Array<string>}
 */
proto.epi2me.workflow.StartRequest.prototype.getInputfoldersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setInputfoldersList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.addInputfolders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.clearInputfoldersList = function() {
  return this.setInputfoldersList([]);
};


/**
 * optional string outputFolder = 6;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getOutputfolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setOutputfolder = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string idWorkflow = 10;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getIdworkflow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setIdworkflow = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string computeAccountId = 11;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getComputeaccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setComputeaccountid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string storageAccountId = 20;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getStorageaccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setStorageaccountid = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional bool isConsentedHuman = 21;
 * @return {boolean}
 */
proto.epi2me.workflow.StartRequest.prototype.getIsconsentedhuman = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setIsconsentedhuman = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional string idDataset = 22;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getIddataset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setIddataset = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional bool storeResults = 23;
 * @return {boolean}
 */
proto.epi2me.workflow.StartRequest.prototype.getStoreresults = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setStoreresults = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};


/**
 * optional google.protobuf.Struct userDefined = 24;
 * @return {?proto.google.protobuf.Struct}
 */
proto.epi2me.workflow.StartRequest.prototype.getUserdefined = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 24));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
*/
proto.epi2me.workflow.StartRequest.prototype.setUserdefined = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.clearUserdefined = function() {
  return this.setUserdefined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.epi2me.workflow.StartRequest.prototype.hasUserdefined = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * repeated InstanceAttribute instanceAttributes = 25;
 * @return {!Array<!proto.epi2me.workflow.StartRequest.InstanceAttribute>}
 */
proto.epi2me.workflow.StartRequest.prototype.getInstanceattributesList = function() {
  return /** @type{!Array<!proto.epi2me.workflow.StartRequest.InstanceAttribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.epi2me.workflow.StartRequest.InstanceAttribute, 25));
};


/**
 * @param {!Array<!proto.epi2me.workflow.StartRequest.InstanceAttribute>} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
*/
proto.epi2me.workflow.StartRequest.prototype.setInstanceattributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.epi2me.workflow.StartRequest.InstanceAttribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.epi2me.workflow.StartRequest.InstanceAttribute}
 */
proto.epi2me.workflow.StartRequest.prototype.addInstanceattributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.epi2me.workflow.StartRequest.InstanceAttribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.clearInstanceattributesList = function() {
  return this.setInstanceattributesList([]);
};


/**
 * optional string region = 26;
 * @return {string}
 */
proto.epi2me.workflow.StartRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartRequest} returns this
 */
proto.epi2me.workflow.StartRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.StartReply.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.StartReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.StartReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StartReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    started: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    idworkflowinstance: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.StartReply}
 */
proto.epi2me.workflow.StartReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.StartReply;
  return proto.epi2me.workflow.StartReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.StartReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.StartReply}
 */
proto.epi2me.workflow.StartReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStarted(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdworkflowinstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.StartReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.StartReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.StartReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StartReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIdworkflowinstance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool started = 1;
 * @return {boolean}
 */
proto.epi2me.workflow.StartReply.prototype.getStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.epi2me.workflow.StartReply} returns this
 */
proto.epi2me.workflow.StartReply.prototype.setStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string idWorkflowInstance = 2;
 * @return {string}
 */
proto.epi2me.workflow.StartReply.prototype.getIdworkflowinstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.StartReply} returns this
 */
proto.epi2me.workflow.StartReply.prototype.setIdworkflowinstance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.epi2me.workflow.RunningInstancesReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.RunningInstancesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.RunningInstancesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.RunningInstancesReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.RunningInstancesReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflowinstanceList: jspb.Message.toObjectList(msg.getWorkflowinstanceList(),
    proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.RunningInstancesReply}
 */
proto.epi2me.workflow.RunningInstancesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.RunningInstancesReply;
  return proto.epi2me.workflow.RunningInstancesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.RunningInstancesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.RunningInstancesReply}
 */
proto.epi2me.workflow.RunningInstancesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails;
      reader.readMessage(value,proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.deserializeBinaryFromReader);
      msg.addWorkflowinstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.RunningInstancesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.RunningInstancesReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.RunningInstancesReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.RunningInstancesReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflowinstanceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    idworkflowinstance: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails}
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails;
  return proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails}
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdworkflowinstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdworkflowinstance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string idWorkflowInstance = 1;
 * @return {string}
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.prototype.getIdworkflowinstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails} returns this
 */
proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails.prototype.setIdworkflowinstance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated RunningInstanceDetails workflowInstance = 1;
 * @return {!Array<!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails>}
 */
proto.epi2me.workflow.RunningInstancesReply.prototype.getWorkflowinstanceList = function() {
  return /** @type{!Array<!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails, 1));
};


/**
 * @param {!Array<!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails>} value
 * @return {!proto.epi2me.workflow.RunningInstancesReply} returns this
*/
proto.epi2me.workflow.RunningInstancesReply.prototype.setWorkflowinstanceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails}
 */
proto.epi2me.workflow.RunningInstancesReply.prototype.addWorkflowinstance = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.epi2me.workflow.RunningInstancesReply.RunningInstanceDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.epi2me.workflow.RunningInstancesReply} returns this
 */
proto.epi2me.workflow.RunningInstancesReply.prototype.clearWorkflowinstanceList = function() {
  return this.setWorkflowinstanceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.WorkflowInstanceByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.WorkflowInstanceByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idworkflowinstance: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.WorkflowInstanceByIdRequest}
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.WorkflowInstanceByIdRequest;
  return proto.epi2me.workflow.WorkflowInstanceByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.WorkflowInstanceByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.WorkflowInstanceByIdRequest}
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdworkflowinstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.WorkflowInstanceByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.WorkflowInstanceByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdworkflowinstance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string idWorkflowInstance = 1;
 * @return {string}
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.prototype.getIdworkflowinstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.epi2me.workflow.WorkflowInstanceByIdRequest} returns this
 */
proto.epi2me.workflow.WorkflowInstanceByIdRequest.prototype.setIdworkflowinstance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.RunningInstanceStateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.RunningInstanceStateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.RunningInstanceStateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    upload: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    analyse: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    report: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.RunningInstanceStateReply}
 */
proto.epi2me.workflow.RunningInstanceStateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.RunningInstanceStateReply;
  return proto.epi2me.workflow.RunningInstanceStateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.RunningInstanceStateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.RunningInstanceStateReply}
 */
proto.epi2me.workflow.RunningInstanceStateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpload(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnalyse(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.RunningInstanceStateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.RunningInstanceStateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.RunningInstanceStateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpload();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAnalyse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getReport();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool upload = 1;
 * @return {boolean}
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.getUpload = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.epi2me.workflow.RunningInstanceStateReply} returns this
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.setUpload = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool analyse = 2;
 * @return {boolean}
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.getAnalyse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.epi2me.workflow.RunningInstanceStateReply} returns this
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.setAnalyse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool report = 3;
 * @return {boolean}
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.getReport = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.epi2me.workflow.RunningInstanceStateReply} returns this
 */
proto.epi2me.workflow.RunningInstanceStateReply.prototype.setReport = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.epi2me.workflow.StopReply.prototype.toObject = function(opt_includeInstance) {
  return proto.epi2me.workflow.StopReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.epi2me.workflow.StopReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StopReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.epi2me.workflow.StopReply}
 */
proto.epi2me.workflow.StopReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.epi2me.workflow.StopReply;
  return proto.epi2me.workflow.StopReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.epi2me.workflow.StopReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.epi2me.workflow.StopReply}
 */
proto.epi2me.workflow.StopReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.epi2me.workflow.StopReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.epi2me.workflow.StopReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.epi2me.workflow.StopReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.epi2me.workflow.StopReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.epi2me.workflow.StopReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.epi2me.workflow.StopReply} returns this
 */
proto.epi2me.workflow.StopReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.epi2me.workflow);
